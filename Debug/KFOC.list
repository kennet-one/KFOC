
KFOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007dd8  08007dd8  00008dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08007ddc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  24000010  08007dec  00009010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000ec  08007dec  000090ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001432c  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000026de  00000000  00000000  0001d36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a0  00000000  00000000  0001fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d8d  00000000  00000000  00020be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003478b  00000000  00000000  00021975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015c78  00000000  00000000  00056100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015bd9f  00000000  00000000  0006bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c7b17  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004b0c  00000000  00000000  001c7b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  001cc668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007dac 	.word	0x08007dac

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007dac 	.word	0x08007dac

0800030c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b094      	sub	sp, #80	@ 0x50
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000312:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2240      	movs	r2, #64	@ 0x40
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f007 fd15 	bl	8007d54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032a:	4b49      	ldr	r3, [pc, #292]	@ (8000450 <MX_ADC1_Init+0x144>)
 800032c:	4a49      	ldr	r2, [pc, #292]	@ (8000454 <MX_ADC1_Init+0x148>)
 800032e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000330:	4b47      	ldr	r3, [pc, #284]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000336:	4b46      	ldr	r3, [pc, #280]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800033c:	4b44      	ldr	r3, [pc, #272]	@ (8000450 <MX_ADC1_Init+0x144>)
 800033e:	2201      	movs	r2, #1
 8000340:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000342:	4b43      	ldr	r3, [pc, #268]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000344:	2204      	movs	r2, #4
 8000346:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000348:	4b41      	ldr	r3, [pc, #260]	@ (8000450 <MX_ADC1_Init+0x144>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800034e:	4b40      	ldr	r3, [pc, #256]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000350:	2200      	movs	r2, #0
 8000352:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000354:	4b3e      	ldr	r3, [pc, #248]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000356:	2201      	movs	r2, #1
 8000358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035a:	4b3d      	ldr	r3, [pc, #244]	@ (8000450 <MX_ADC1_Init+0x144>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000362:	4b3b      	ldr	r3, [pc, #236]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000364:	2200      	movs	r2, #0
 8000366:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000368:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <MX_ADC1_Init+0x144>)
 800036a:	2200      	movs	r2, #0
 800036c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800036e:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000370:	2200      	movs	r2, #0
 8000372:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000374:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800037c:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <MX_ADC1_Init+0x144>)
 800037e:	2201      	movs	r2, #1
 8000380:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000382:	4833      	ldr	r0, [pc, #204]	@ (8000450 <MX_ADC1_Init+0x144>)
 8000384:	f000 fe2c 	bl	8000fe0 <HAL_ADC_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800038e:	f000 fa29 	bl	80007e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000392:	2300      	movs	r3, #0
 8000394:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000396:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800039a:	4619      	mov	r1, r3
 800039c:	482c      	ldr	r0, [pc, #176]	@ (8000450 <MX_ADC1_Init+0x144>)
 800039e:	f002 fca9 	bl	8002cf4 <HAL_ADCEx_MultiModeConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80003a8:	f000 fa1c 	bl	80007e4 <Error_Handler>
  }

  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 80003ac:	4828      	ldr	r0, [pc, #160]	@ (8000450 <MX_ADC1_Init+0x144>)
 80003ae:	f002 fd83 	bl	8002eb8 <HAL_ADCEx_DisableInjectedQueue>

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_16;
 80003b2:	4b29      	ldr	r3, [pc, #164]	@ (8000458 <MX_ADC1_Init+0x14c>)
 80003b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80003b6:	2309      	movs	r3, #9
 80003b8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80003ba:	2302      	movs	r3, #2
 80003bc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80003be:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80003c2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80003c4:	2304      	movs	r3, #4
 80003c6:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSignedSaturation = DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.InjectedNbrOfConversion = 3;
 80003d2:	2303      	movs	r3, #3
 80003d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sConfigInjected.AutoInjectedConv = DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sConfigInjected.QueueInjectedContext = DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80003e8:	2384      	movs	r3, #132	@ 0x84
 80003ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING;
 80003ec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80003f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4814      	ldr	r0, [pc, #80]	@ (8000450 <MX_ADC1_Init+0x144>)
 80003fe:	f001 fd5f 	bl	8001ec0 <HAL_ADCEx_InjectedConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000408:	f000 f9ec 	bl	80007e4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_17;
 800040c:	4b13      	ldr	r3, [pc, #76]	@ (800045c <MX_ADC1_Init+0x150>)
 800040e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000410:	f240 130f 	movw	r3, #271	@ 0x10f
 8000414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	@ (8000450 <MX_ADC1_Init+0x144>)
 800041c:	f001 fd50 	bl	8001ec0 <HAL_ADCEx_InjectedConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000426:	f000 f9dd 	bl	80007e4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_18;
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <MX_ADC1_Init+0x154>)
 800042c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800042e:	f240 2315 	movw	r3, #533	@ 0x215
 8000432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_ADC1_Init+0x144>)
 800043a:	f001 fd41 	bl	8001ec0 <HAL_ADCEx_InjectedConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000444:	f000 f9ce 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3750      	adds	r7, #80	@ 0x50
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2400002c 	.word	0x2400002c
 8000454:	40022000 	.word	0x40022000
 8000458:	43210000 	.word	0x43210000
 800045c:	47520000 	.word	0x47520000
 8000460:	4b840000 	.word	0x4b840000

08000464 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b0b8      	sub	sp, #224	@ 0xe0
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	22b8      	movs	r2, #184	@ 0xb8
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f007 fc65 	bl	8007d54 <memset>
  if(adcHandle->Instance==ADC1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a2f      	ldr	r2, [pc, #188]	@ (800054c <HAL_ADC_MspInit+0xe8>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d157      	bne.n	8000544 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000494:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000498:	f04f 0300 	mov.w	r3, #0
 800049c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80004a0:	2305      	movs	r3, #5
 80004a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 160;
 80004a4:	23a0      	movs	r3, #160	@ 0xa0
 80004a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 20;
 80004a8:	2314      	movs	r3, #20
 80004aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4618      	mov	r0, r3
 80004cc:	f004 f814 	bl	80044f8 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80004d6:	f000 f985 	bl	80007e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004da:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 80004dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 80004e2:	f043 0320 	orr.w	r3, r3, #32
 80004e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 80004ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004f0:	f003 0320 	and.w	r3, r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 80004fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fe:	4a14      	ldr	r2, [pc, #80]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <HAL_ADC_MspInit+0xec>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000516:	2313      	movs	r3, #19
 8000518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051c:	2303      	movs	r3, #3
 800051e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800052c:	4619      	mov	r1, r3
 800052e:	4809      	ldr	r0, [pc, #36]	@ (8000554 <HAL_ADC_MspInit+0xf0>)
 8000530:	f002 fe72 	bl	8003218 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	2012      	movs	r0, #18
 800053a:	f002 fdc0 	bl	80030be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800053e:	2012      	movs	r0, #18
 8000540:	f002 fdd7 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000544:	bf00      	nop
 8000546:	37e0      	adds	r7, #224	@ 0xe0
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40022000 	.word	0x40022000
 8000550:	58024400 	.word	0x58024400
 8000554:	58020000 	.word	0x58020000

08000558 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b44      	ldr	r3, [pc, #272]	@ (8000680 <MX_GPIO_Init+0x128>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000574:	4a42      	ldr	r2, [pc, #264]	@ (8000680 <MX_GPIO_Init+0x128>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800057e:	4b40      	ldr	r3, [pc, #256]	@ (8000680 <MX_GPIO_Init+0x128>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <MX_GPIO_Init+0x128>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000592:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x128>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800059c:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <MX_GPIO_Init+0x128>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b0:	4a33      	ldr	r2, [pc, #204]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ba:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ec:	4a24      	ldr	r2, [pc, #144]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f6:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_GPIO_Init+0x128>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	481e      	ldr	r0, [pc, #120]	@ (8000684 <MX_GPIO_Init+0x12c>)
 800060a:	f002 ffad 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800060e:	2302      	movs	r3, #2
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000612:	2311      	movs	r3, #17
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4817      	ldr	r0, [pc, #92]	@ (8000684 <MX_GPIO_Init+0x12c>)
 8000626:	f002 fdf7 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800062a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800063c:	2307      	movs	r3, #7
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4810      	ldr	r0, [pc, #64]	@ (8000688 <MX_GPIO_Init+0x130>)
 8000648:	f002 fde6 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800064c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000652:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	480a      	ldr	r0, [pc, #40]	@ (800068c <MX_GPIO_Init+0x134>)
 8000664:	f002 fdd8 	bl	8003218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2102      	movs	r1, #2
 800066c:	2017      	movs	r0, #23
 800066e:	f002 fd26 	bl	80030be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000672:	2017      	movs	r0, #23
 8000674:	f002 fd3d 	bl	80030f2 <HAL_NVIC_EnableIRQ>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58024400 	.word	0x58024400
 8000684:	58020400 	.word	0x58020400
 8000688:	58020c00 	.word	0x58020c00
 800068c:	58020800 	.word	0x58020800

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000694:	f000 f87a 	bl	800078c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fb32 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f808 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ff5a 	bl	8000558 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a4:	f7ff fe32 	bl	800030c <MX_ADC1_Init>
  MX_TIM1_Init();
 80006a8:	f000 f9b6 	bl	8000a18 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <main+0x1c>

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	@ 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	224c      	movs	r2, #76	@ 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 fb48 	bl	8007d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 fb42 	bl	8007d54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d0:	2002      	movs	r0, #2
 80006d2:	f002 ff87 	bl	80035e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <SystemClock_Config+0xd8>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a2a      	ldr	r2, [pc, #168]	@ (8000788 <SystemClock_Config+0xd8>)
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <SystemClock_Config+0xd8>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <SystemClock_Config+0xd8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000700:	d1f8      	bne.n	80006f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000714:	2305      	movs	r3, #5
 8000716:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000718:	2360      	movs	r3, #96	@ 0x60
 800071a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000728:	2308      	movs	r3, #8
 800072a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800072c:	2300      	movs	r3, #0
 800072e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000738:	4618      	mov	r0, r3
 800073a:	f002 ff8d 	bl	8003658 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 f84e 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	233f      	movs	r3, #63	@ 0x3f
 800074a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000754:	2308      	movs	r3, #8
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000758:	2340      	movs	r3, #64	@ 0x40
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075c:	2340      	movs	r3, #64	@ 0x40
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000764:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000766:	2340      	movs	r3, #64	@ 0x40
 8000768:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2103      	movs	r1, #3
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fb4c 	bl	8003e0c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800077a:	f000 f833 	bl	80007e4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3770      	adds	r7, #112	@ 0x70
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	58024800 	.word	0x58024800

0800078c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800079e:	f002 fcc3 	bl	8003128 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007ae:	231f      	movs	r3, #31
 80007b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007b2:	2387      	movs	r3, #135	@ 0x87
 80007b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007ba:	2300      	movs	r3, #0
 80007bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007be:	2301      	movs	r3, #1
 80007c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007ce:	463b      	mov	r3, r7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fce1 	bl	8003198 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007d6:	2004      	movs	r0, #4
 80007d8:	f002 fcbe 	bl	8003158 <HAL_MPU_Enable>

}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007fc:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x30>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x30>)
 8000808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 fab3 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <ADC_IRQHandler+0x10>)
 800088a:	f000 fdb1 	bl	80013f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2400002c 	.word	0x2400002c

08000898 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800089c:	2040      	movs	r0, #64	@ 0x40
 800089e:	f002 fe7c 	bl	800359a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80008a2:	2080      	movs	r0, #128	@ 0x80
 80008a4:	f002 fe79 	bl	800359a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80008a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80008ac:	f002 fe75 	bl	800359a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <TIM1_BRK_IRQHandler+0x10>)
 80008ba:	f006 fabb 	bl	8006e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2400009c 	.word	0x2400009c

080008c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008cc:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <SystemInit+0x100>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a3d      	ldr	r2, [pc, #244]	@ (80009c8 <SystemInit+0x100>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <SystemInit+0x104>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d807      	bhi.n	80008f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e8:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <SystemInit+0x104>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 030f 	bic.w	r3, r3, #15
 80008f0:	4a36      	ldr	r2, [pc, #216]	@ (80009cc <SystemInit+0x104>)
 80008f2:	f043 0307 	orr.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f8:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <SystemInit+0x108>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <SystemInit+0x108>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <SystemInit+0x108>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <SystemInit+0x108>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4930      	ldr	r1, [pc, #192]	@ (80009d0 <SystemInit+0x108>)
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <SystemInit+0x10c>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <SystemInit+0x104>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <SystemInit+0x104>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	4a28      	ldr	r2, [pc, #160]	@ (80009cc <SystemInit+0x104>)
 800092c:	f043 0307 	orr.w	r3, r3, #7
 8000930:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <SystemInit+0x108>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000938:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <SystemInit+0x108>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <SystemInit+0x108>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <SystemInit+0x108>)
 8000946:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <SystemInit+0x110>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <SystemInit+0x108>)
 800094c:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <SystemInit+0x114>)
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <SystemInit+0x108>)
 8000952:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <SystemInit+0x118>)
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <SystemInit+0x108>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <SystemInit+0x108>)
 800095e:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <SystemInit+0x118>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <SystemInit+0x108>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <SystemInit+0x108>)
 800096a:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <SystemInit+0x118>)
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <SystemInit+0x108>)
 8000970:	2200      	movs	r2, #0
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <SystemInit+0x108>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <SystemInit+0x108>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <SystemInit+0x108>)
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <SystemInit+0x108>)
 8000988:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800098c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d113      	bne.n	80009bc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <SystemInit+0x108>)
 8000996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800099a:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <SystemInit+0x108>)
 800099c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <SystemInit+0x11c>)
 80009a6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009aa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <SystemInit+0x108>)
 80009ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <SystemInit+0x108>)
 80009b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	52002000 	.word	0x52002000
 80009d0:	58024400 	.word	0x58024400
 80009d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009d8:	02020200 	.word	0x02020200
 80009dc:	01ff0000 	.word	0x01ff0000
 80009e0:	01010280 	.word	0x01010280
 80009e4:	52004000 	.word	0x52004000

080009e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <ExitRun0Mode+0x2c>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <ExitRun0Mode+0x2c>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009f8:	bf00      	nop
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <ExitRun0Mode+0x2c>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	58024800 	.word	0x58024800

08000a18 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b098      	sub	sp, #96	@ 0x60
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2234      	movs	r2, #52	@ 0x34
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 f985 	bl	8007d54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a4a:	4b52      	ldr	r3, [pc, #328]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a4c:	4a52      	ldr	r2, [pc, #328]	@ (8000b98 <MX_TIM1_Init+0x180>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a50:	4b50      	ldr	r3, [pc, #320]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000a56:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a58:	2260      	movs	r2, #96	@ 0x60
 8000a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a5e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b48      	ldr	r3, [pc, #288]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a76:	4847      	ldr	r0, [pc, #284]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a78:	f006 f985 	bl	8006d86 <HAL_TIM_PWM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f7ff feaf 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a86:	4843      	ldr	r0, [pc, #268]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000a88:	f006 f91c 	bl	8006cc4 <HAL_TIM_OC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a92:	f7ff fea7 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	483a      	ldr	r0, [pc, #232]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000aaa:	f007 f80d 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000ab4:	f7ff fe96 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	482d      	ldr	r0, [pc, #180]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000ade:	f006 fb2b 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ae8:	f7ff fe7c 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000af0:	2204      	movs	r2, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4827      	ldr	r0, [pc, #156]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000af6:	f006 fb1f 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000b00:	f7ff fe70 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b08:	2208      	movs	r2, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4821      	ldr	r0, [pc, #132]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000b0e:	f006 fb13 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000b18:	f7ff fe64 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1500;
 8000b20:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000b30:	f006 fa88 	bl	8007044 <HAL_TIM_OC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000b3a:	f7ff fe53 	bl	80007e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 60;
 8000b4a:	233c      	movs	r3, #60	@ 0x3c
 8000b4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000b76:	f007 f843 	bl	8007c00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8000b80:	f7ff fe30 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x17c>)
 8000b86:	f000 f831 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3760      	adds	r7, #96	@ 0x60
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400009c 	.word	0x2400009c
 8000b98:	40010000 	.word	0x40010000

08000b9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <HAL_TIM_PWM_MspInit+0x48>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d116      	bne.n	8000bdc <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2018      	movs	r0, #24
 8000bd2:	f002 fa74 	bl	80030be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000bd6:	2018      	movs	r0, #24
 8000bd8:	f002 fa8b 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010000 	.word	0x40010000
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <HAL_TIM_MspPostInit+0xac>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d13f      	bne.n	8000c8e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <HAL_TIM_MspPostInit+0xb0>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c4a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <HAL_TIM_MspPostInit+0xb4>)
 8000c68:	f002 fad6 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c6c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <HAL_TIM_MspPostInit+0xb8>)
 8000c8a:	f002 fac5 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010000 	.word	0x40010000
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58020000 	.word	0x58020000

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ce4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cac:	f7ff fe9c 	bl	80009e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f7ff fe0a 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	@ (8000cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f007 f843 	bl	8007d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fcd7 	bl	8000690 <main>
  bx  lr
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ce8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cf0:	08007ddc 	.word	0x08007ddc
  ldr r2, =_sbss
 8000cf4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cf8:	240000ec 	.word	0x240000ec

08000cfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC3_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f002 f9ce 	bl	80030a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d0c:	f003 fa34 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8000d10:	4602      	mov	r2, r0
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_Init+0x68>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	4913      	ldr	r1, [pc, #76]	@ (8000d6c <HAL_Init+0x6c>)
 8000d1e:	5ccb      	ldrb	r3, [r1, r3]
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_Init+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_Init+0x6c>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <HAL_Init+0x70>)
 8000d42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d44:	4a0b      	ldr	r2, [pc, #44]	@ (8000d74 <HAL_Init+0x74>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f814 	bl	8000d78 <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e002      	b.n	8000d60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5a:	f7ff fd49 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	08007dc4 	.word	0x08007dc4
 8000d70:	24000004 	.word	0x24000004
 8000d74:	24000000 	.word	0x24000000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e021      	b.n	8000dd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_InitTick+0x64>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_InitTick+0x60>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 f9b3 	bl	800310e <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f002 f97d 	bl	80030be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_InitTick+0x68>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2400000c 	.word	0x2400000c
 8000ddc:	24000000 	.word	0x24000000
 8000de0:	24000008 	.word	0x24000008

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2400000c 	.word	0x2400000c
 8000e08:	240000e8 	.word	0x240000e8

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	240000e8 	.word	0x240000e8

08000e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6093      	str	r3, [r2, #8]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	5fffffc0 	.word	0x5fffffc0

08000ef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f08:	d101      	bne.n	8000f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	6fffffc0 	.word	0x6fffffc0

08000f44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f58:	d101      	bne.n	8000f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <LL_ADC_IsEnabled+0x18>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <LL_ADC_IsEnabled+0x1a>
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d101      	bne.n	8000fd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e1ee      	b.n	80013d8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001004:	2b00      	cmp	r3, #0
 8001006:	d109      	bne.n	800101c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fa2b 	bl	8000464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff67 	bl	8000ef4 <LL_ADC_IsDeepPowerDownEnabled>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff4d 	bl	8000ed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff82 	bl	8000f44 <LL_ADC_IsInternalRegulatorEnabled>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d114      	bne.n	8001070 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff66 	bl	8000f1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001050:	4b8e      	ldr	r3, [pc, #568]	@ (800128c <HAL_ADC_Init+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	099b      	lsrs	r3, r3, #6
 8001056:	4a8e      	ldr	r2, [pc, #568]	@ (8001290 <HAL_ADC_Init+0x2b0>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	099b      	lsrs	r3, r3, #6
 800105e:	3301      	adds	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001062:	e002      	b.n	800106a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	3b01      	subs	r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f9      	bne.n	8001064 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff65 	bl	8000f44 <LL_ADC_IsInternalRegulatorEnabled>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10d      	bne.n	800109c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001084:	f043 0210 	orr.w	r2, r3, #16
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff76 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 80010a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 8188 	bne.w	80013c6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f040 8184 	bne.w	80013c6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010c6:	f043 0202 	orr.w	r2, r3, #2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff4a 	bl	8000f6c <LL_ADC_IsEnabled>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d136      	bne.n	800114c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001294 <HAL_ADC_Init+0x2b4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d004      	beq.n	80010f2 <HAL_ADC_Init+0x112>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001298 <HAL_ADC_Init+0x2b8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10e      	bne.n	8001110 <HAL_ADC_Init+0x130>
 80010f2:	4868      	ldr	r0, [pc, #416]	@ (8001294 <HAL_ADC_Init+0x2b4>)
 80010f4:	f7ff ff3a 	bl	8000f6c <LL_ADC_IsEnabled>
 80010f8:	4604      	mov	r4, r0
 80010fa:	4867      	ldr	r0, [pc, #412]	@ (8001298 <HAL_ADC_Init+0x2b8>)
 80010fc:	f7ff ff36 	bl	8000f6c <LL_ADC_IsEnabled>
 8001100:	4603      	mov	r3, r0
 8001102:	4323      	orrs	r3, r4
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	e008      	b.n	8001122 <HAL_ADC_Init+0x142>
 8001110:	4862      	ldr	r0, [pc, #392]	@ (800129c <HAL_ADC_Init+0x2bc>)
 8001112:	f7ff ff2b 	bl	8000f6c <LL_ADC_IsEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d012      	beq.n	800114c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5a      	ldr	r2, [pc, #360]	@ (8001294 <HAL_ADC_Init+0x2b4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d004      	beq.n	800113a <HAL_ADC_Init+0x15a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a58      	ldr	r2, [pc, #352]	@ (8001298 <HAL_ADC_Init+0x2b8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x15e>
 800113a:	4a59      	ldr	r2, [pc, #356]	@ (80012a0 <HAL_ADC_Init+0x2c0>)
 800113c:	e000      	b.n	8001140 <HAL_ADC_Init+0x160>
 800113e:	4a59      	ldr	r2, [pc, #356]	@ (80012a4 <HAL_ADC_Init+0x2c4>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f7ff fe6c 	bl	8000e24 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a52      	ldr	r2, [pc, #328]	@ (800129c <HAL_ADC_Init+0x2bc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d129      	bne.n	80011aa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001160:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001166:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b08      	cmp	r3, #8
 800116e:	d013      	beq.n	8001198 <HAL_ADC_Init+0x1b8>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d00d      	beq.n	8001194 <HAL_ADC_Init+0x1b4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b1c      	cmp	r3, #28
 800117e:	d007      	beq.n	8001190 <HAL_ADC_Init+0x1b0>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b18      	cmp	r3, #24
 8001186:	d101      	bne.n	800118c <HAL_ADC_Init+0x1ac>
 8001188:	2318      	movs	r3, #24
 800118a:	e006      	b.n	800119a <HAL_ADC_Init+0x1ba>
 800118c:	2300      	movs	r3, #0
 800118e:	e004      	b.n	800119a <HAL_ADC_Init+0x1ba>
 8001190:	2310      	movs	r3, #16
 8001192:	e002      	b.n	800119a <HAL_ADC_Init+0x1ba>
 8001194:	2308      	movs	r3, #8
 8001196:	e000      	b.n	800119a <HAL_ADC_Init+0x1ba>
 8001198:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800119a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	e00e      	b.n	80011c8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7e5b      	ldrb	r3, [r3, #25]
 80011ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80011b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80011ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d106      	bne.n	80011e0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	3b01      	subs	r3, #1
 80011d8:	045b      	lsls	r3, r3, #17
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a26      	ldr	r2, [pc, #152]	@ (800129c <HAL_ADC_Init+0x2bc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d115      	bne.n	8001232 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_ADC_Init+0x2c8>)
 800120e:	4013      	ands	r3, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	69b9      	ldr	r1, [r7, #24]
 8001216:	430b      	orrs	r3, r1
 8001218:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	e009      	b.n	8001246 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_ADC_Init+0x2cc>)
 800123a:	4013      	ands	r3, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	69b9      	ldr	r1, [r7, #24]
 8001242:	430b      	orrs	r3, r1
 8001244:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fea1 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 8001250:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff feae 	bl	8000fb8 <LL_ADC_INJ_IsConversionOngoing>
 800125c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 808e 	bne.w	8001382 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 808a 	bne.w	8001382 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_ADC_Init+0x2bc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d11b      	bne.n	80012b0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e1b      	ldrb	r3, [r3, #24]
 800127c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001284:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	e018      	b.n	80012be <HAL_ADC_Init+0x2de>
 800128c:	24000000 	.word	0x24000000
 8001290:	053e2d63 	.word	0x053e2d63
 8001294:	40022000 	.word	0x40022000
 8001298:	40022100 	.word	0x40022100
 800129c:	58026000 	.word	0x58026000
 80012a0:	40022300 	.word	0x40022300
 80012a4:	58026300 	.word	0x58026300
 80012a8:	fff04007 	.word	0xfff04007
 80012ac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	4b46      	ldr	r3, [pc, #280]	@ (80013e0 <HAL_ADC_Init+0x400>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	430b      	orrs	r3, r1
 80012d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d137      	bne.n	800134c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3f      	ldr	r2, [pc, #252]	@ (80013e4 <HAL_ADC_Init+0x404>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d116      	bne.n	800131a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_ADC_Init+0x408>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012fe:	4311      	orrs	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800130a:	430a      	orrs	r2, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e020      	b.n	800135c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <HAL_ADC_Init+0x40c>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001328:	3a01      	subs	r2, #1
 800132a:	0411      	lsls	r1, r2, #16
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001330:	4311      	orrs	r1, r2
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001336:	4311      	orrs	r1, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800133c:	430a      	orrs	r2, r1
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	e007      	b.n	800135c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_ADC_Init+0x404>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d002      	beq.n	8001382 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fa8f 	bl	80018a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10c      	bne.n	80013a4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	f023 010f 	bic.w	r1, r3, #15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a2:	e007      	b.n	80013b4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020f 	bic.w	r2, r2, #15
 80013b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b8:	f023 0303 	bic.w	r3, r3, #3
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80013c4:	e007      	b.n	80013d6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3724      	adds	r7, #36	@ 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	ffffbffc 	.word	0xffffbffc
 80013e4:	58026000 	.word	0x58026000
 80013e8:	fc00f81f 	.word	0xfc00f81f
 80013ec:	fc00f81e 	.word	0xfc00f81e

080013f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a87      	ldr	r2, [pc, #540]	@ (8001630 <HAL_ADC_IRQHandler+0x240>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d004      	beq.n	8001420 <HAL_ADC_IRQHandler+0x30>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a86      	ldr	r2, [pc, #536]	@ (8001634 <HAL_ADC_IRQHandler+0x244>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_ADC_IRQHandler+0x34>
 8001420:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_ADC_IRQHandler+0x248>)
 8001422:	e000      	b.n	8001426 <HAL_ADC_IRQHandler+0x36>
 8001424:	4b85      	ldr	r3, [pc, #532]	@ (800163c <HAL_ADC_IRQHandler+0x24c>)
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd35 	bl	8000e96 <LL_ADC_GetMultimode>
 800142c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <HAL_ADC_IRQHandler+0x78>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001452:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fd25 	bl	8001eaa <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_ADC_IRQHandler+0x8c>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10a      	bne.n	8001492 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8083 	beq.w	800158e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d07d      	beq.n	800158e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fccb 	bl	8000e4a <LL_ADC_REG_IsTriggerSourceSWStart>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d062      	beq.n	8001580 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a5d      	ldr	r2, [pc, #372]	@ (8001634 <HAL_ADC_IRQHandler+0x244>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_IRQHandler+0xda>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e000      	b.n	80014cc <HAL_ADC_IRQHandler+0xdc>
 80014ca:	4b59      	ldr	r3, [pc, #356]	@ (8001630 <HAL_ADC_IRQHandler+0x240>)
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d008      	beq.n	80014e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d002      	beq.n	80014e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d104      	bne.n	80014f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	e00c      	b.n	800150a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001634 <HAL_ADC_IRQHandler+0x244>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d002      	beq.n	8001500 <HAL_ADC_IRQHandler+0x110>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e000      	b.n	8001502 <HAL_ADC_IRQHandler+0x112>
 8001500:	4b4b      	ldr	r3, [pc, #300]	@ (8001630 <HAL_ADC_IRQHandler+0x240>)
 8001502:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d135      	bne.n	8001580 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b08      	cmp	r3, #8
 8001520:	d12e      	bne.n	8001580 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fd33 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11a      	bne.n	8001568 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 020c 	bic.w	r2, r2, #12
 8001540:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d112      	bne.n	8001580 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	661a      	str	r2, [r3, #96]	@ 0x60
 8001566:	e00b      	b.n	8001580 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f96f 	bl	8001864 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x1b2>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a0 	beq.w	80016ee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 809a 	beq.w	80016ee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fc4a 	bl	8000e70 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80015dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fc31 	bl	8000e4a <LL_ADC_REG_IsTriggerSourceSWStart>
 80015e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <HAL_ADC_IRQHandler+0x244>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d002      	beq.n	80015fa <HAL_ADC_IRQHandler+0x20a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	e000      	b.n	80015fc <HAL_ADC_IRQHandler+0x20c>
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_ADC_IRQHandler+0x240>)
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4293      	cmp	r3, r2
 8001602:	d008      	beq.n	8001616 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d002      	beq.n	8001616 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d104      	bne.n	8001620 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	e014      	b.n	800164a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <HAL_ADC_IRQHandler+0x244>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00a      	beq.n	8001640 <HAL_ADC_IRQHandler+0x250>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	e008      	b.n	8001642 <HAL_ADC_IRQHandler+0x252>
 8001630:	40022000 	.word	0x40022000
 8001634:	40022100 	.word	0x40022100
 8001638:	40022300 	.word	0x40022300
 800163c:	58026300 	.word	0x58026300
 8001640:	4b84      	ldr	r3, [pc, #528]	@ (8001854 <HAL_ADC_IRQHandler+0x464>)
 8001642:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d047      	beq.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_ADC_IRQHandler+0x27a>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03f      	beq.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d13a      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001674:	2b40      	cmp	r3, #64	@ 0x40
 8001676:	d133      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d12e      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc96 	bl	8000fb8 <LL_ADC_INJ_IsConversionOngoing>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11a      	bne.n	80016c8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d112      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80016c6:	e00b      	b.n	80016e0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016cc:	f043 0210 	orr.w	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fbba 	bl	8001e5a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2260      	movs	r2, #96	@ 0x60
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d011      	beq.n	800171c <HAL_ADC_IRQHandler+0x32c>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8b2 	bl	8001878 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <HAL_ADC_IRQHandler+0x35c>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00d      	beq.n	800174c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001734:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fba0 	bl	8001e82 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001752:	2b00      	cmp	r3, #0
 8001754:	d012      	beq.n	800177c <HAL_ADC_IRQHandler+0x38c>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001764:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fb92 	bl	8001e96 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d043      	beq.n	800180e <HAL_ADC_IRQHandler+0x41e>
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03e      	beq.n	800180e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001798:	2301      	movs	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	e021      	b.n	80017e2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001854 <HAL_ADC_IRQHandler+0x464>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d004      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x3c8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a29      	ldr	r2, [pc, #164]	@ (8001858 <HAL_ADC_IRQHandler+0x468>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_IRQHandler+0x3cc>
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_ADC_IRQHandler+0x46c>)
 80017ba:	e000      	b.n	80017be <HAL_ADC_IRQHandler+0x3ce>
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <HAL_ADC_IRQHandler+0x470>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fb77 	bl	8000eb2 <LL_ADC_GetMultiDMATransfer>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ce:	e008      	b.n	80017e2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10e      	bne.n	8001806 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017f8:	f043 0202 	orr.w	r2, r3, #2
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f843 	bl	800188c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2210      	movs	r2, #16
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d018      	beq.n	800184a <HAL_ADC_IRQHandler+0x45a>
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181e:	2b00      	cmp	r3, #0
 8001820:	d013      	beq.n	800184a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001826:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001832:	f043 0208 	orr.w	r2, r3, #8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001842:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb12 	bl	8001e6e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	40022100 	.word	0x40022100
 800185c:	40022300 	.word	0x40022300
 8001860:	58026300 	.word	0x58026300

08001864 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001a60 <ADC_ConfigureBoostMode+0x1c0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <ADC_ConfigureBoostMode+0x1c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6b      	ldr	r2, [pc, #428]	@ (8001a64 <ADC_ConfigureBoostMode+0x1c4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d109      	bne.n	80018d0 <ADC_ConfigureBoostMode+0x30>
 80018bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <ADC_ConfigureBoostMode+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e008      	b.n	80018e2 <ADC_ConfigureBoostMode+0x42>
 80018d0:	4b66      	ldr	r3, [pc, #408]	@ (8001a6c <ADC_ConfigureBoostMode+0x1cc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01c      	beq.n	8001920 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80018e6:	f002 fdc1 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80018ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80018f4:	d010      	beq.n	8001918 <ADC_ConfigureBoostMode+0x78>
 80018f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80018fa:	d873      	bhi.n	80019e4 <ADC_ConfigureBoostMode+0x144>
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d002      	beq.n	8001908 <ADC_ConfigureBoostMode+0x68>
 8001902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001906:	d16d      	bne.n	80019e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	60fb      	str	r3, [r7, #12]
        break;
 8001916:	e068      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	60fb      	str	r3, [r7, #12]
        break;
 800191e:	e064      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001920:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	f003 ff86 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 800192c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001936:	d051      	beq.n	80019dc <ADC_ConfigureBoostMode+0x13c>
 8001938:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800193c:	d854      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 800193e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001942:	d047      	beq.n	80019d4 <ADC_ConfigureBoostMode+0x134>
 8001944:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001948:	d84e      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 800194a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800194e:	d03d      	beq.n	80019cc <ADC_ConfigureBoostMode+0x12c>
 8001950:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001954:	d848      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 8001956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800195a:	d033      	beq.n	80019c4 <ADC_ConfigureBoostMode+0x124>
 800195c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001960:	d842      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 8001962:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001966:	d029      	beq.n	80019bc <ADC_ConfigureBoostMode+0x11c>
 8001968:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800196c:	d83c      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 800196e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001972:	d01a      	beq.n	80019aa <ADC_ConfigureBoostMode+0x10a>
 8001974:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001978:	d836      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 800197a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800197e:	d014      	beq.n	80019aa <ADC_ConfigureBoostMode+0x10a>
 8001980:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001984:	d830      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 8001986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800198a:	d00e      	beq.n	80019aa <ADC_ConfigureBoostMode+0x10a>
 800198c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001990:	d82a      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 8001992:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001996:	d008      	beq.n	80019aa <ADC_ConfigureBoostMode+0x10a>
 8001998:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800199c:	d824      	bhi.n	80019e8 <ADC_ConfigureBoostMode+0x148>
 800199e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019a2:	d002      	beq.n	80019aa <ADC_ConfigureBoostMode+0x10a>
 80019a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80019a8:	d11e      	bne.n	80019e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	60fb      	str	r3, [r7, #12]
        break;
 80019ba:	e016      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
        break;
 80019c2:	e012      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	60fb      	str	r3, [r7, #12]
        break;
 80019ca:	e00e      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	60fb      	str	r3, [r7, #12]
        break;
 80019d2:	e00a      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	09db      	lsrs	r3, r3, #7
 80019d8:	60fb      	str	r3, [r7, #12]
        break;
 80019da:	e006      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	60fb      	str	r3, [r7, #12]
        break;
 80019e2:	e002      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80019e4:	bf00      	nop
 80019e6:	e000      	b.n	80019ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80019e8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <ADC_ConfigureBoostMode+0x1d0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d808      	bhi.n	8001a0a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001a08:	e025      	b.n	8001a56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <ADC_ConfigureBoostMode+0x1d4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d80a      	bhi.n	8001a28 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a24:	609a      	str	r2, [r3, #8]
}
 8001a26:	e016      	b.n	8001a56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <ADC_ConfigureBoostMode+0x1d8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d80a      	bhi.n	8001a46 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	e007      	b.n	8001a56 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001a54:	609a      	str	r2, [r3, #8]
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40022100 	.word	0x40022100
 8001a68:	40022300 	.word	0x40022300
 8001a6c:	58026300 	.word	0x58026300
 8001a70:	005f5e10 	.word	0x005f5e10
 8001a74:	00bebc20 	.word	0x00bebc20
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <LL_ADC_SetCommonPathInternalCh>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_GetCommonPathInternalCh>:
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_ADC_SetChannelPreselection>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    if (ADCx != ADC3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <LL_ADC_SetChannelPreselection+0x70>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d027      	beq.n	8001b22 <LL_ADC_SetChannelPreselection+0x62>
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <LL_ADC_SetChannelPreselection+0x2c>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	e015      	b.n	8001b18 <LL_ADC_SetChannelPreselection+0x58>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e003      	b.n	8001b0e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2201      	movs	r2, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	69d2      	ldr	r2, [r2, #28]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	61da      	str	r2, [r3, #28]
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	58026000 	.word	0x58026000

08001b34 <LL_ADC_SetOffset>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3360      	adds	r3, #96	@ 0x60
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <LL_ADC_SetOffset+0x60>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10b      	bne.n	8001b70 <LL_ADC_SetOffset+0x3c>
    MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	e00b      	b.n	8001b88 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58026000 	.word	0x58026000

08001b98 <LL_ADC_GetOffsetChannel>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3360      	adds	r3, #96	@ 0x60
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_SetOffsetSignedSaturation>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c04 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00e      	beq.n	8001bf6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3360      	adds	r3, #96	@ 0x60
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	58026000 	.word	0x58026000

08001c08 <LL_ADC_SetOffsetSaturation>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <LL_ADC_SetOffsetSaturation+0x40>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d10e      	bne.n	8001c3a <LL_ADC_SetOffsetSaturation+0x32>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3360      	adds	r3, #96	@ 0x60
 8001c20:	461a      	mov	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg,
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	58026000 	.word	0x58026000

08001c4c <LL_ADC_SetOffsetSign>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <LL_ADC_SetOffsetSign+0x40>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d10e      	bne.n	8001c7e <LL_ADC_SetOffsetSign+0x32>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3360      	adds	r3, #96	@ 0x60
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg,
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	58026000 	.word	0x58026000

08001c90 <LL_ADC_SetOffsetState>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3360      	adds	r3, #96	@ 0x60
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <LL_ADC_SetOffsetState+0x50>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <LL_ADC_SetOffsetState+0x34>
    MODIFY_REG(*preg,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	e007      	b.n	8001cd4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	58026000 	.word	0x58026000

08001ce4 <LL_ADC_INJ_SetQueueMode>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <LL_ADC_INJ_SetQueueMode+0x28>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60da      	str	r2, [r3, #12]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	7fdfffff 	.word	0x7fdfffff

08001d10 <LL_ADC_SetChannelSamplingTime>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3314      	adds	r3, #20
 8001d20:	461a      	mov	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0e5b      	lsrs	r3, r3, #25
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0d1b      	lsrs	r3, r3, #20
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2107      	movs	r1, #7
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	401a      	ands	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	0d1b      	lsrs	r3, r3, #20
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <LL_ADC_SetChannelSingleDiff>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d115      	bne.n	8001da8 <LL_ADC_SetChannelSingleDiff+0x40>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0318 	and.w	r3, r3, #24
 8001d92:	4914      	ldr	r1, [pc, #80]	@ (8001de4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d94:	40d9      	lsrs	r1, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	400b      	ands	r3, r1
 8001d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001da6:	e014      	b.n	8001dd2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0318 	and.w	r3, r3, #24
 8001dbe:	4909      	ldr	r1, [pc, #36]	@ (8001de4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001dc0:	40d9      	lsrs	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	58026000 	.word	0x58026000
 8001de4:	000fffff 	.word	0x000fffff

08001de8 <LL_ADC_IsEnabled>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <LL_ADC_IsEnabled+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_ADC_IsEnabled+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_REG_IsConversionOngoing>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d101      	bne.n	8001e26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_INJ_IsConversionOngoing>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d101      	bne.n	8001e4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b0bd      	sub	sp, #244	@ 0xf4
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  /*  DISCEN and JAUTO bits can't be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv == ENABLE)));

  /* Verification of channel number */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4aa2      	ldr	r2, [pc, #648]	@ (8002168 <HAL_ADCEx_InjectedConfigChannel+0x2a8>)
 8001ee0:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <HAL_ADCEx_InjectedConfigChannel+0x32>
 8001eec:	2302      	movs	r3, #2
 8001eee:	f000 bee9 	b.w	8002cc4 <HAL_ADCEx_InjectedConfigChannel+0xe04>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d130      	bne.n	8001f6c <HAL_ADCEx_InjectedConfigChannel+0xac>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d179      	bne.n	8002006 <HAL_ADCEx_InjectedConfigChannel+0x146>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_ADCEx_InjectedConfigChannel+0x7c>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	025b      	lsls	r3, r3, #9
 8001f22:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001f2e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f3a:	e007      	b.n	8001f4c <HAL_ADCEx_InjectedConfigChannel+0x8c>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8001f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f52:	4b86      	ldr	r3, [pc, #536]	@ (800216c <HAL_ADCEx_InjectedConfigChannel+0x2ac>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001f68:	669a      	str	r2, [r3, #104]	@ 0x68
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001f6a:	e04c      	b.n	8002006 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_ADCEx_InjectedConfigChannel+0xe6>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001f98:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 021f 	and.w	r2, r3, #31
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_ADCEx_InjectedConfigChannel+0x146>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800216c <HAL_ADCEx_InjectedConfigChannel+0x2ac>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	430b      	orrs	r3, r1
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff12 	bl	8001e34 <LL_ADC_INJ_IsConversionOngoing>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d161      	bne.n	80020da <HAL_ADCEx_InjectedConfigChannel+0x21a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel)))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db38      	blt.n	8002090 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a53      	ldr	r2, [pc, #332]	@ (8002170 <HAL_ADCEx_InjectedConfigChannel+0x2b0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d033      	beq.n	8002090 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2201      	movs	r2, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	e01d      	b.n	8002082 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 800205a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800205e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 8002062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADCEx_InjectedConfigChannel+0x1ae>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  return __builtin_clz(value);
 800206e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2201      	movs	r2, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	69d1      	ldr	r1, [r2, #28]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002096:	2b00      	cmp	r3, #0
 8002098:	d112      	bne.n	80020c0 <HAL_ADCEx_InjectedConfigChannel+0x200>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80020aa:	055a      	lsls	r2, r3, #21
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020b2:	051b      	lsls	r3, r3, #20
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e00c      	b.n	80020da <HAL_ADCEx_InjectedConfigChannel+0x21a>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80020d0:	055a      	lsls	r2, r3, #21
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe95 	bl	8001e0e <LL_ADC_REG_IsConversionOngoing>
 80020e4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fea1 	bl	8001e34 <LL_ADC_INJ_IsConversionOngoing>
 80020f2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 83ed 	bne.w	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 83e8 	bne.w	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_ADCEx_InjectedConfigChannel+0x25a>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <HAL_ADCEx_InjectedConfigChannel+0x288>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_ADCEx_InjectedConfigChannel+0x276>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002132:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002134:	e026      	b.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x2c4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002144:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002146:	e01d      	b.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x2c4>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800214e:	2b01      	cmp	r3, #1
 8002150:	d110      	bne.n	8002174 <HAL_ADCEx_InjectedConfigChannel+0x2b4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	@ 0x60

        tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002164:	e00e      	b.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x2c4>
 8002166:	bf00      	nop
 8002168:	47ff0000 	.word	0x47ff0000
 800216c:	04104000 	.word	0x04104000
 8002170:	58026000 	.word	0x58026000
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002182:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800218a:	2b01      	cmp	r3, #1
 800218c:	d128      	bne.n	80021e0 <HAL_ADCEx_InjectedConfigChannel+0x320>
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4aaa      	ldr	r2, [pc, #680]	@ (800243c <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d012      	beq.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x2fe>
      {
        MODIFY_REG(hadc->Instance->CFGR2,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	4ba8      	ldr	r3, [pc, #672]	@ (8002440 <HAL_ADCEx_InjectedConfigChannel+0x580>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021a6:	3a01      	subs	r2, #1
 80021a8:	0411      	lsls	r1, r2, #16
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ae:	430a      	orrs	r2, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0202 	orr.w	r2, r2, #2
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	e018      	b.n	80021f0 <HAL_ADCEx_InjectedConfigChannel+0x330>
                   sConfigInjected->InjecOversampling.RightBitShift
                  );
      }
      else
      {
        MODIFY_REG(hadc->Instance->CFGR2,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	430b      	orrs	r3, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0202 	orr.w	r2, r2, #2
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	e007      	b.n	80021f0 <HAL_ADCEx_InjectedConfigChannel+0x330>
#endif
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0202 	bic.w	r2, r2, #2
 80021ee:	611a      	str	r2, [r3, #16]
    }

    /* Set sampling time of the selected ADC channel */
    LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff fd87 	bl	8001d10 <LL_ADC_SetChannelSamplingTime>
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a8d      	ldr	r2, [pc, #564]	@ (800243c <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10d      	bne.n	8002228 <HAL_ADCEx_InjectedConfigChannel+0x368>
    {
      tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002226:	e032      	b.n	800228e <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    }
    else
#endif /* ADC_VER_V5_V90 */
    {
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <HAL_ADCEx_InjectedConfigChannel+0x584>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002234:	d10b      	bne.n	800224e <HAL_ADCEx_InjectedConfigChannel+0x38e>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	e01d      	b.n	800228a <HAL_ADCEx_InjectedConfigChannel+0x3ca>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	e00a      	b.n	800228a <HAL_ADCEx_InjectedConfigChannel+0x3ca>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    }

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d039      	beq.n	800230a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel, tmpOffsetShifted);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80022a6:	f7ff fc45 	bl	8001b34 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a63      	ldr	r2, [pc, #396]	@ (800243c <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d119      	bne.n	80022e8 <HAL_ADCEx_InjectedConfigChannel+0x428>
      {
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fcc3 	bl	8001c4c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_ADCEx_InjectedConfigChannel+0x41e>
 80022d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022dc:	e000      	b.n	80022e0 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80022de:	2300      	movs	r3, #0
 80022e0:	461a      	mov	r2, r3
 80022e2:	f7ff fc91 	bl	8001c08 <LL_ADC_SetOffsetSaturation>
 80022e6:	e2f8      	b.n	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_ADCEx_InjectedConfigChannel+0x440>
 80022fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022fe:	e000      	b.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x442>
 8002300:	2300      	movs	r3, #0
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff fc5e 	bl	8001bc4 <LL_ADC_SetOffsetSignedSaturation>
 8002308:	e2e7      	b.n	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>

    }
    else
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a4b      	ldr	r2, [pc, #300]	@ (800243c <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 818a 	bne.w	800262a <HAL_ADCEx_InjectedConfigChannel+0x76a>
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fc3b 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x482>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc30 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	e01e      	b.n	8002380 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc25 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8002368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e004      	b.n	800237e <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8002374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	e018      	b.n	80023ca <HAL_ADCEx_InjectedConfigChannel+0x50a>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80023ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80023b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADCEx_InjectedConfigChannel+0x500>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e004      	b.n	80023ca <HAL_ADCEx_InjectedConfigChannel+0x50a>
  return __builtin_clz(value);
 80023c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_ADCEx_InjectedConfigChannel+0x51c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fc5a 	bl	8001c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fbd8 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_ADCEx_InjectedConfigChannel+0x548>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fbcd 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	f003 021f 	and.w	r2, r3, #31
 8002406:	e025      	b.n	8002454 <HAL_ADCEx_InjectedConfigChannel+0x594>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fbc2 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800242a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800242e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_ADCEx_InjectedConfigChannel+0x588>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e00b      	b.n	8002452 <HAL_ADCEx_InjectedConfigChannel+0x592>
 800243a:	bf00      	nop
 800243c:	58026000 	.word	0x58026000
 8002440:	fc00fe1d 	.word	0xfc00fe1d
 8002444:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADCEx_InjectedConfigChannel+0x5ac>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	e018      	b.n	800249e <HAL_ADCEx_InjectedConfigChannel+0x5de>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002484:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADCEx_InjectedConfigChannel+0x5d4>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADCEx_InjectedConfigChannel+0x5de>
  return __builtin_clz(value);
 8002494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fbf0 	bl	8001c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fb6e 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_ADCEx_InjectedConfigChannel+0x61c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fb63 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	e01e      	b.n	800251a <HAL_ADCEx_InjectedConfigChannel+0x65a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fb58 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002502:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADCEx_InjectedConfigChannel+0x64e>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e004      	b.n	8002518 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 800250e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	e018      	b.n	8002564 <HAL_ADCEx_InjectedConfigChannel+0x6a4>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800254a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADCEx_InjectedConfigChannel+0x69a>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e004      	b.n	8002564 <HAL_ADCEx_InjectedConfigChannel+0x6a4>
  return __builtin_clz(value);
 800255a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	429a      	cmp	r2, r3
 8002566:	d106      	bne.n	8002576 <HAL_ADCEx_InjectedConfigChannel+0x6b6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	2102      	movs	r1, #2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fb8d 	bl	8001c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2103      	movs	r1, #3
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fb0b 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2103      	movs	r1, #3
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fb00 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	e01a      	b.n	80025d8 <HAL_ADCEx_InjectedConfigChannel+0x718>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2103      	movs	r1, #3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff faf5 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADCEx_InjectedConfigChannel+0x70c>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e004      	b.n	80025d6 <HAL_ADCEx_InjectedConfigChannel+0x716>
  return __builtin_clz(value);
 80025cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADCEx_InjectedConfigChannel+0x730>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	e011      	b.n	8002614 <HAL_ADCEx_InjectedConfigChannel+0x754>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002600:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADCEx_InjectedConfigChannel+0x74c>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADCEx_InjectedConfigChannel+0x754>
  return __builtin_clz(value);
 800260c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8160 	bne.w	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2103      	movs	r1, #3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fb34 	bl	8001c90 <LL_ADC_SetOffsetState>
 8002628:	e157      	b.n	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
      else
#endif /* ADC_VER_V5_V90 */
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fab1 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_ADCEx_InjectedConfigChannel+0x796>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff faa6 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	e017      	b.n	8002686 <HAL_ADCEx_InjectedConfigChannel+0x7c6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa9b 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800266e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002670:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADCEx_InjectedConfigChannel+0x7bc>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADCEx_InjectedConfigChannel+0x7c4>
  return __builtin_clz(value);
 800267c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_ADCEx_InjectedConfigChannel+0x7de>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	e011      	b.n	80026c2 <HAL_ADCEx_InjectedConfigChannel+0x802>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADCEx_InjectedConfigChannel+0x7fa>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADCEx_InjectedConfigChannel+0x802>
  return __builtin_clz(value);
 80026ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d107      	bne.n	80026d6 <HAL_ADCEx_InjectedConfigChannel+0x816>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	f7ff fa2f 	bl	8001b34 <LL_ADC_SetOffset>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fa5b 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_ADCEx_InjectedConfigChannel+0x842>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fa50 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	e017      	b.n	8002732 <HAL_ADCEx_InjectedConfigChannel+0x872>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fa45 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800271a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800271c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800271e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADCEx_InjectedConfigChannel+0x868>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADCEx_InjectedConfigChannel+0x870>
  return __builtin_clz(value);
 8002728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADCEx_InjectedConfigChannel+0x88a>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	e011      	b.n	800276e <HAL_ADCEx_InjectedConfigChannel+0x8ae>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800275c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADCEx_InjectedConfigChannel+0x8ae>
  return __builtin_clz(value);
 8002766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	429a      	cmp	r2, r3
 8002770:	d107      	bne.n	8002782 <HAL_ADCEx_InjectedConfigChannel+0x8c2>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	2101      	movs	r1, #1
 800277e:	f7ff f9d9 	bl	8001b34 <LL_ADC_SetOffset>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2102      	movs	r1, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fa05 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_ADCEx_InjectedConfigChannel+0x8ee>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f9fa 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	e017      	b.n	80027de <HAL_ADCEx_InjectedConfigChannel+0x91e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f9ef 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADCEx_InjectedConfigChannel+0x914>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADCEx_InjectedConfigChannel+0x91c>
  return __builtin_clz(value);
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADCEx_InjectedConfigChannel+0x936>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e011      	b.n	800281a <HAL_ADCEx_InjectedConfigChannel+0x95a>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADCEx_InjectedConfigChannel+0x952>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e003      	b.n	800281a <HAL_ADCEx_InjectedConfigChannel+0x95a>
  return __builtin_clz(value);
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	429a      	cmp	r2, r3
 800281c:	d107      	bne.n	800282e <HAL_ADCEx_InjectedConfigChannel+0x96e>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2300      	movs	r3, #0
 8002828:	2103      	movs	r1, #3
 800282a:	f7ff f983 	bl	8001b34 <LL_ADC_SetOffset>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2103      	movs	r1, #3
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f9af 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2103      	movs	r1, #3
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f9a4 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	e017      	b.n	800288a <HAL_ADCEx_InjectedConfigChannel+0x9ca>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2103      	movs	r1, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f999 	bl	8001b98 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	61bb      	str	r3, [r7, #24]
  return result;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADCEx_InjectedConfigChannel+0x9c0>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADCEx_InjectedConfigChannel+0x9c8>
  return __builtin_clz(value);
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <HAL_ADCEx_InjectedConfigChannel+0x9e2>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	e011      	b.n	80028c6 <HAL_ADCEx_InjectedConfigChannel+0xa06>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]
  return result;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADCEx_InjectedConfigChannel+0x9fe>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e003      	b.n	80028c6 <HAL_ADCEx_InjectedConfigChannel+0xa06>
  return __builtin_clz(value);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d107      	bne.n	80028da <HAL_ADCEx_InjectedConfigChannel+0xa1a>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	2103      	movs	r1, #3
 80028d6:	f7ff f92d 	bl	8001b34 <LL_ADC_SetOffset>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fa82 	bl	8001de8 <LL_ADC_IsEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 81e6 	bne.w	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f7ff fa35 	bl	8001d68 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4a81      	ldr	r2, [pc, #516]	@ (8002b08 <HAL_ADCEx_InjectedConfigChannel+0xc48>)
 8002904:	4293      	cmp	r3, r2
 8002906:	f040 80e0 	bne.w	8002aca <HAL_ADCEx_InjectedConfigChannel+0xc0a>
    {
      /* Set ADC channel preselection of corresponding negative channel */
      LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfigInjected->InjectedChannel));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	497e      	ldr	r1, [pc, #504]	@ (8002b0c <HAL_ADCEx_InjectedConfigChannel+0xc4c>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d147      	bne.n	80029a8 <HAL_ADCEx_InjectedConfigChannel+0xae8>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	497c      	ldr	r1, [pc, #496]	@ (8002b10 <HAL_ADCEx_InjectedConfigChannel+0xc50>)
 800291e:	428b      	cmp	r3, r1
 8002920:	d040      	beq.n	80029a4 <HAL_ADCEx_InjectedConfigChannel+0xae4>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	497b      	ldr	r1, [pc, #492]	@ (8002b14 <HAL_ADCEx_InjectedConfigChannel+0xc54>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d039      	beq.n	80029a0 <HAL_ADCEx_InjectedConfigChannel+0xae0>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4979      	ldr	r1, [pc, #484]	@ (8002b18 <HAL_ADCEx_InjectedConfigChannel+0xc58>)
 8002932:	428b      	cmp	r3, r1
 8002934:	d032      	beq.n	800299c <HAL_ADCEx_InjectedConfigChannel+0xadc>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4978      	ldr	r1, [pc, #480]	@ (8002b1c <HAL_ADCEx_InjectedConfigChannel+0xc5c>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d02b      	beq.n	8002998 <HAL_ADCEx_InjectedConfigChannel+0xad8>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4976      	ldr	r1, [pc, #472]	@ (8002b20 <HAL_ADCEx_InjectedConfigChannel+0xc60>)
 8002946:	428b      	cmp	r3, r1
 8002948:	d024      	beq.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0xad4>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4975      	ldr	r1, [pc, #468]	@ (8002b24 <HAL_ADCEx_InjectedConfigChannel+0xc64>)
 8002950:	428b      	cmp	r3, r1
 8002952:	d01d      	beq.n	8002990 <HAL_ADCEx_InjectedConfigChannel+0xad0>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4973      	ldr	r1, [pc, #460]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 800295a:	428b      	cmp	r3, r1
 800295c:	d016      	beq.n	800298c <HAL_ADCEx_InjectedConfigChannel+0xacc>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4972      	ldr	r1, [pc, #456]	@ (8002b2c <HAL_ADCEx_InjectedConfigChannel+0xc6c>)
 8002964:	428b      	cmp	r3, r1
 8002966:	d00f      	beq.n	8002988 <HAL_ADCEx_InjectedConfigChannel+0xac8>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4970      	ldr	r1, [pc, #448]	@ (8002b30 <HAL_ADCEx_InjectedConfigChannel+0xc70>)
 800296e:	428b      	cmp	r3, r1
 8002970:	d008      	beq.n	8002984 <HAL_ADCEx_InjectedConfigChannel+0xac4>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	496f      	ldr	r1, [pc, #444]	@ (8002b34 <HAL_ADCEx_InjectedConfigChannel+0xc74>)
 8002978:	428b      	cmp	r3, r1
 800297a:	d101      	bne.n	8002980 <HAL_ADCEx_InjectedConfigChannel+0xac0>
 800297c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b38 <HAL_ADCEx_InjectedConfigChannel+0xc78>)
 800297e:	e0a0      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002980:	2300      	movs	r3, #0
 8002982:	e09e      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002984:	4b6d      	ldr	r3, [pc, #436]	@ (8002b3c <HAL_ADCEx_InjectedConfigChannel+0xc7c>)
 8002986:	e09c      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002988:	4b6d      	ldr	r3, [pc, #436]	@ (8002b40 <HAL_ADCEx_InjectedConfigChannel+0xc80>)
 800298a:	e09a      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 800298c:	4b67      	ldr	r3, [pc, #412]	@ (8002b2c <HAL_ADCEx_InjectedConfigChannel+0xc6c>)
 800298e:	e098      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002990:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 8002992:	e096      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002994:	4b6b      	ldr	r3, [pc, #428]	@ (8002b44 <HAL_ADCEx_InjectedConfigChannel+0xc84>)
 8002996:	e094      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002998:	4b6b      	ldr	r3, [pc, #428]	@ (8002b48 <HAL_ADCEx_InjectedConfigChannel+0xc88>)
 800299a:	e092      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 800299c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b4c <HAL_ADCEx_InjectedConfigChannel+0xc8c>)
 800299e:	e090      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 80029a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b50 <HAL_ADCEx_InjectedConfigChannel+0xc90>)
 80029a2:	e08e      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e08c      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4969      	ldr	r1, [pc, #420]	@ (8002b54 <HAL_ADCEx_InjectedConfigChannel+0xc94>)
 80029ae:	428b      	cmp	r3, r1
 80029b0:	d140      	bne.n	8002a34 <HAL_ADCEx_InjectedConfigChannel+0xb74>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4956      	ldr	r1, [pc, #344]	@ (8002b10 <HAL_ADCEx_InjectedConfigChannel+0xc50>)
 80029b8:	428b      	cmp	r3, r1
 80029ba:	d039      	beq.n	8002a30 <HAL_ADCEx_InjectedConfigChannel+0xb70>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4954      	ldr	r1, [pc, #336]	@ (8002b14 <HAL_ADCEx_InjectedConfigChannel+0xc54>)
 80029c2:	428b      	cmp	r3, r1
 80029c4:	d032      	beq.n	8002a2c <HAL_ADCEx_InjectedConfigChannel+0xb6c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4953      	ldr	r1, [pc, #332]	@ (8002b18 <HAL_ADCEx_InjectedConfigChannel+0xc58>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d02b      	beq.n	8002a28 <HAL_ADCEx_InjectedConfigChannel+0xb68>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4951      	ldr	r1, [pc, #324]	@ (8002b1c <HAL_ADCEx_InjectedConfigChannel+0xc5c>)
 80029d6:	428b      	cmp	r3, r1
 80029d8:	d024      	beq.n	8002a24 <HAL_ADCEx_InjectedConfigChannel+0xb64>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4950      	ldr	r1, [pc, #320]	@ (8002b20 <HAL_ADCEx_InjectedConfigChannel+0xc60>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d01d      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0xb60>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	494e      	ldr	r1, [pc, #312]	@ (8002b24 <HAL_ADCEx_InjectedConfigChannel+0xc64>)
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d016      	beq.n	8002a1c <HAL_ADCEx_InjectedConfigChannel+0xb5c>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	494d      	ldr	r1, [pc, #308]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d00f      	beq.n	8002a18 <HAL_ADCEx_InjectedConfigChannel+0xb58>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	494b      	ldr	r1, [pc, #300]	@ (8002b2c <HAL_ADCEx_InjectedConfigChannel+0xc6c>)
 80029fe:	428b      	cmp	r3, r1
 8002a00:	d008      	beq.n	8002a14 <HAL_ADCEx_InjectedConfigChannel+0xb54>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	494b      	ldr	r1, [pc, #300]	@ (8002b34 <HAL_ADCEx_InjectedConfigChannel+0xc74>)
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADCEx_InjectedConfigChannel+0xb50>
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_ADCEx_InjectedConfigChannel+0xc78>)
 8002a0e:	e058      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a10:	2300      	movs	r3, #0
 8002a12:	e056      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a14:	4b4a      	ldr	r3, [pc, #296]	@ (8002b40 <HAL_ADCEx_InjectedConfigChannel+0xc80>)
 8002a16:	e054      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a18:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <HAL_ADCEx_InjectedConfigChannel+0xc6c>)
 8002a1a:	e052      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a1c:	4b42      	ldr	r3, [pc, #264]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 8002a1e:	e050      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a20:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <HAL_ADCEx_InjectedConfigChannel+0xc84>)
 8002a22:	e04e      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a24:	4b48      	ldr	r3, [pc, #288]	@ (8002b48 <HAL_ADCEx_InjectedConfigChannel+0xc88>)
 8002a26:	e04c      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a28:	4b48      	ldr	r3, [pc, #288]	@ (8002b4c <HAL_ADCEx_InjectedConfigChannel+0xc8c>)
 8002a2a:	e04a      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a2c:	4b48      	ldr	r3, [pc, #288]	@ (8002b50 <HAL_ADCEx_InjectedConfigChannel+0xc90>)
 8002a2e:	e048      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e046      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4947      	ldr	r1, [pc, #284]	@ (8002b58 <HAL_ADCEx_InjectedConfigChannel+0xc98>)
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	d140      	bne.n	8002ac0 <HAL_ADCEx_InjectedConfigChannel+0xc00>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4933      	ldr	r1, [pc, #204]	@ (8002b10 <HAL_ADCEx_InjectedConfigChannel+0xc50>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d039      	beq.n	8002abc <HAL_ADCEx_InjectedConfigChannel+0xbfc>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4931      	ldr	r1, [pc, #196]	@ (8002b14 <HAL_ADCEx_InjectedConfigChannel+0xc54>)
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d032      	beq.n	8002ab8 <HAL_ADCEx_InjectedConfigChannel+0xbf8>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4930      	ldr	r1, [pc, #192]	@ (8002b18 <HAL_ADCEx_InjectedConfigChannel+0xc58>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d02b      	beq.n	8002ab4 <HAL_ADCEx_InjectedConfigChannel+0xbf4>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	492e      	ldr	r1, [pc, #184]	@ (8002b1c <HAL_ADCEx_InjectedConfigChannel+0xc5c>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d024      	beq.n	8002ab0 <HAL_ADCEx_InjectedConfigChannel+0xbf0>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	492d      	ldr	r1, [pc, #180]	@ (8002b20 <HAL_ADCEx_InjectedConfigChannel+0xc60>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d01d      	beq.n	8002aac <HAL_ADCEx_InjectedConfigChannel+0xbec>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	492b      	ldr	r1, [pc, #172]	@ (8002b24 <HAL_ADCEx_InjectedConfigChannel+0xc64>)
 8002a76:	428b      	cmp	r3, r1
 8002a78:	d016      	beq.n	8002aa8 <HAL_ADCEx_InjectedConfigChannel+0xbe8>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	492a      	ldr	r1, [pc, #168]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d00f      	beq.n	8002aa4 <HAL_ADCEx_InjectedConfigChannel+0xbe4>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	492d      	ldr	r1, [pc, #180]	@ (8002b40 <HAL_ADCEx_InjectedConfigChannel+0xc80>)
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d008      	beq.n	8002aa0 <HAL_ADCEx_InjectedConfigChannel+0xbe0>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4932      	ldr	r1, [pc, #200]	@ (8002b5c <HAL_ADCEx_InjectedConfigChannel+0xc9c>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADCEx_InjectedConfigChannel+0xbdc>
 8002a98:	4b31      	ldr	r3, [pc, #196]	@ (8002b60 <HAL_ADCEx_InjectedConfigChannel+0xca0>)
 8002a9a:	e012      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e010      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_ADCEx_InjectedConfigChannel+0xc9c>)
 8002aa2:	e00e      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_ADCEx_InjectedConfigChannel+0xc6c>)
 8002aa6:	e00c      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <HAL_ADCEx_InjectedConfigChannel+0xc68>)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_ADCEx_InjectedConfigChannel+0xc84>)
 8002aae:	e008      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002ab0:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <HAL_ADCEx_InjectedConfigChannel+0xc88>)
 8002ab2:	e006      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002ab4:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_ADCEx_InjectedConfigChannel+0xc8c>)
 8002ab6:	e004      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002ab8:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <HAL_ADCEx_InjectedConfigChannel+0xc90>)
 8002aba:	e002      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_ADCEx_InjectedConfigChannel+0xc02>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7fe fffb 	bl	8001ac0 <LL_ADC_SetChannelPreselection>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f280 80f2 	bge.w	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_ADCEx_InjectedConfigChannel+0xc4c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADCEx_InjectedConfigChannel+0xc28>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_ADCEx_InjectedConfigChannel+0xc94>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d13d      	bne.n	8002b64 <HAL_ADCEx_InjectedConfigChannel+0xca4>
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <HAL_ADCEx_InjectedConfigChannel+0xc4c>)
 8002aea:	f7ff f97d 	bl	8001de8 <LL_ADC_IsEnabled>
 8002aee:	4604      	mov	r4, r0
 8002af0:	4818      	ldr	r0, [pc, #96]	@ (8002b54 <HAL_ADCEx_InjectedConfigChannel+0xc94>)
 8002af2:	f7ff f979 	bl	8001de8 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4323      	orrs	r3, r4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e037      	b.n	8002b76 <HAL_ADCEx_InjectedConfigChannel+0xcb6>
 8002b06:	bf00      	nop
 8002b08:	47ff0000 	.word	0x47ff0000
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	04300002 	.word	0x04300002
 8002b14:	08600004 	.word	0x08600004
 8002b18:	0c900008 	.word	0x0c900008
 8002b1c:	10c00010 	.word	0x10c00010
 8002b20:	14f00020 	.word	0x14f00020
 8002b24:	2a000400 	.word	0x2a000400
 8002b28:	2e300800 	.word	0x2e300800
 8002b2c:	32601000 	.word	0x32601000
 8002b30:	43210000 	.word	0x43210000
 8002b34:	4b840000 	.word	0x4b840000
 8002b38:	4fb80000 	.word	0x4fb80000
 8002b3c:	47520000 	.word	0x47520000
 8002b40:	36902000 	.word	0x36902000
 8002b44:	25b00200 	.word	0x25b00200
 8002b48:	21800100 	.word	0x21800100
 8002b4c:	1d500080 	.word	0x1d500080
 8002b50:	19200040 	.word	0x19200040
 8002b54:	40022100 	.word	0x40022100
 8002b58:	58026000 	.word	0x58026000
 8002b5c:	3ac04000 	.word	0x3ac04000
 8002b60:	3ef08000 	.word	0x3ef08000
 8002b64:	4859      	ldr	r0, [pc, #356]	@ (8002ccc <HAL_ADCEx_InjectedConfigChannel+0xe0c>)
 8002b66:	f7ff f93f 	bl	8001de8 <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8095 	beq.w	8002ca6 <HAL_ADCEx_InjectedConfigChannel+0xde6>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0xe10>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d004      	beq.n	8002b90 <HAL_ADCEx_InjectedConfigChannel+0xcd0>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a52      	ldr	r2, [pc, #328]	@ (8002cd4 <HAL_ADCEx_InjectedConfigChannel+0xe14>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADCEx_InjectedConfigChannel+0xcd4>
 8002b90:	4b51      	ldr	r3, [pc, #324]	@ (8002cd8 <HAL_ADCEx_InjectedConfigChannel+0xe18>)
 8002b92:	e000      	b.n	8002b96 <HAL_ADCEx_InjectedConfigChannel+0xcd6>
 8002b94:	4b51      	ldr	r3, [pc, #324]	@ (8002cdc <HAL_ADCEx_InjectedConfigChannel+0xe1c>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ff83 	bl	8001aa2 <LL_ADC_GetCommonPathInternalCh>
 8002b9c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8

        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce0 <HAL_ADCEx_InjectedConfigChannel+0xe20>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d131      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0xd4e>
 8002baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d12b      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0xd4e>
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a44      	ldr	r2, [pc, #272]	@ (8002ccc <HAL_ADCEx_InjectedConfigChannel+0xe0c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d17b      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	@ (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0xe10>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADCEx_InjectedConfigChannel+0xd14>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a41      	ldr	r2, [pc, #260]	@ (8002cd4 <HAL_ADCEx_InjectedConfigChannel+0xe14>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADCEx_InjectedConfigChannel+0xd18>
 8002bd4:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <HAL_ADCEx_InjectedConfigChannel+0xe18>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADCEx_InjectedConfigChannel+0xd1a>
 8002bd8:	4a40      	ldr	r2, [pc, #256]	@ (8002cdc <HAL_ADCEx_InjectedConfigChannel+0xe1c>)
 8002bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f7fe ff49 	bl	8001a7c <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_ADCEx_InjectedConfigChannel+0xe24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce8 <HAL_ADCEx_InjectedConfigChannel+0xe28>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002bfe:	e002      	b.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0xd46>
            {
              wait_loop_index--;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <HAL_ADCEx_InjectedConfigChannel+0xd40>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c0c:	e054      	b.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a36      	ldr	r2, [pc, #216]	@ (8002cec <HAL_ADCEx_InjectedConfigChannel+0xe2c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d120      	bne.n	8002c5a <HAL_ADCEx_InjectedConfigChannel+0xd9a>
 8002c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11a      	bne.n	8002c5a <HAL_ADCEx_InjectedConfigChannel+0xd9a>
        {
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	@ (8002ccc <HAL_ADCEx_InjectedConfigChannel+0xe0c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d144      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0xe10>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_ADCEx_InjectedConfigChannel+0xd82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	@ (8002cd4 <HAL_ADCEx_InjectedConfigChannel+0xe14>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_ADCEx_InjectedConfigChannel+0xd86>
 8002c42:	4a25      	ldr	r2, [pc, #148]	@ (8002cd8 <HAL_ADCEx_InjectedConfigChannel+0xe18>)
 8002c44:	e000      	b.n	8002c48 <HAL_ADCEx_InjectedConfigChannel+0xd88>
 8002c46:	4a25      	ldr	r2, [pc, #148]	@ (8002cdc <HAL_ADCEx_InjectedConfigChannel+0xe1c>)
 8002c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7fe ff12 	bl	8001a7c <LL_ADC_SetCommonPathInternalCh>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c58:	e02e      	b.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0xe30>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d129      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
 8002c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d123      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
        {
          if (ADC_VREFINT_INSTANCE(hadc))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a15      	ldr	r2, [pc, #84]	@ (8002ccc <HAL_ADCEx_InjectedConfigChannel+0xe0c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d11e      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0xe10>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADCEx_InjectedConfigChannel+0xdce>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <HAL_ADCEx_InjectedConfigChannel+0xe14>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADCEx_InjectedConfigChannel+0xdd2>
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_ADCEx_InjectedConfigChannel+0xe18>)
 8002c90:	e000      	b.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0xdd4>
 8002c92:	4a12      	ldr	r2, [pc, #72]	@ (8002cdc <HAL_ADCEx_InjectedConfigChannel+0xe1c>)
 8002c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7fe feec 	bl	8001a7c <LL_ADC_SetCommonPathInternalCh>
 8002ca4:	e008      	b.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0xdf8>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	661a      	str	r2, [r3, #96]	@ 0x60

        tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	37f4      	adds	r7, #244	@ 0xf4
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	58026000 	.word	0x58026000
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40022100 	.word	0x40022100
 8002cd8:	40022300 	.word	0x40022300
 8002cdc:	58026300 	.word	0x58026300
 8002ce0:	c7520000 	.word	0xc7520000
 8002ce4:	24000000 	.word	0x24000000
 8002ce8:	053e2d63 	.word	0x053e2d63
 8002cec:	c3210000 	.word	0xc3210000
 8002cf0:	cb840000 	.word	0xcb840000

08002cf4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b0a3      	sub	sp, #140	@ 0x8c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0c1      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d2c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e001      	b.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0a0      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f859 	bl	8001e0e <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff f852 	bl	8001e0e <LL_ADC_REG_IsConversionOngoing>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 8081 	bne.w	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d17c      	bne.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a46      	ldr	r2, [pc, #280]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002d8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d90:	e000      	b.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002d92:	4b46      	ldr	r3, [pc, #280]	@ (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d94:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d039      	beq.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a39      	ldr	r2, [pc, #228]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10e      	bne.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002dc4:	4836      	ldr	r0, [pc, #216]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dc6:	f7ff f80f 	bl	8001de8 <LL_ADC_IsEnabled>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4835      	ldr	r0, [pc, #212]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dce:	f7ff f80b 	bl	8001de8 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4323      	orrs	r3, r4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e008      	b.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002de2:	4833      	ldr	r0, [pc, #204]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002de4:	f7ff f800 	bl	8001de8 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d047      	beq.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002df8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6811      	ldr	r1, [r2, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e10:	e03a      	b.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10e      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002e32:	481b      	ldr	r0, [pc, #108]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e34:	f7fe ffd8 	bl	8001de8 <LL_ADC_IsEnabled>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	481a      	ldr	r0, [pc, #104]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e3c:	f7fe ffd4 	bl	8001de8 <LL_ADC_IsEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4323      	orrs	r3, r4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002e50:	4817      	ldr	r0, [pc, #92]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002e52:	f7fe ffc9 	bl	8001de8 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e72:	e009      	b.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002e86:	e000      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002e92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	378c      	adds	r7, #140	@ 0x8c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40022100 	.word	0x40022100
 8002ea8:	40022300 	.word	0x40022300
 8002eac:	58026300 	.word	0x58026300
 8002eb0:	58026000 	.word	0x58026000
 8002eb4:	fffff0e0 	.word	0xfffff0e0

08002eb8 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe ffa2 	bl	8001e0e <LL_ADC_REG_IsConversionOngoing>
 8002eca:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe ffaf 	bl	8001e34 <LL_ADC_INJ_IsConversionOngoing>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fef9 	bl	8001ce4 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	e001      	b.n	8002efc <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x40>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x40>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00
 8002f4c:	05fa0000 	.word	0x05fa0000

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	@ (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	@ (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	@ (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	@ 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	@ 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003074:	d301      	bcc.n	800307a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003076:	2301      	movs	r3, #1
 8003078:	e00f      	b.n	800309a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <SysTick_Config+0x40>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003082:	210f      	movs	r1, #15
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	f7ff ff8e 	bl	8002fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <SysTick_Config+0x40>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003092:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <SysTick_Config+0x40>)
 8003094:	2207      	movs	r2, #7
 8003096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	e000e010 	.word	0xe000e010

080030a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff29 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff40 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff90 	bl	8002ffc <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5f 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff33 	bl	8002f6c <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa4 	bl	8003064 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800312c:	f3bf 8f5f 	dmb	sy
}
 8003130:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_MPU_Disable+0x28>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	4a06      	ldr	r2, [pc, #24]	@ (8003150 <HAL_MPU_Disable+0x28>)
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_MPU_Disable+0x2c>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00
 8003154:	e000ed90 	.word	0xe000ed90

08003158 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003160:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <HAL_MPU_Enable+0x38>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_MPU_Enable+0x3c>)
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_MPU_Enable+0x3c>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003176:	f3bf 8f4f 	dsb	sy
}
 800317a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800317c:	f3bf 8f6f 	isb	sy
}
 8003180:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed90 	.word	0xe000ed90
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	785a      	ldrb	r2, [r3, #1]
 80031a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_MPU_ConfigRegion+0x7c>)
 80031a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80031a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <HAL_MPU_ConfigRegion+0x7c>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4a19      	ldr	r2, [pc, #100]	@ (8003214 <HAL_MPU_ConfigRegion+0x7c>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_MPU_ConfigRegion+0x7c>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7b1b      	ldrb	r3, [r3, #12]
 80031c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7adb      	ldrb	r3, [r3, #11]
 80031c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7a9b      	ldrb	r3, [r3, #10]
 80031ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80031d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7b5b      	ldrb	r3, [r3, #13]
 80031d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80031d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7b9b      	ldrb	r3, [r3, #14]
 80031de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7bdb      	ldrb	r3, [r3, #15]
 80031e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7a5b      	ldrb	r3, [r3, #9]
 80031ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7a1b      	ldrb	r3, [r3, #8]
 80031f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003200:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003202:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003204:	6113      	str	r3, [r2, #16]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed90 	.word	0xe000ed90

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	@ 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003226:	4b86      	ldr	r3, [pc, #536]	@ (8003440 <HAL_GPIO_Init+0x228>)
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322a:	e18c      	b.n	8003546 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 817e 	beq.w	8003540 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d005      	beq.n	800325c <HAL_GPIO_Init+0x44>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d130      	bne.n	80032be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003292:	2201      	movs	r2, #1
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0201 	and.w	r2, r3, #1
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d017      	beq.n	80032fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d123      	bne.n	800334e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d8 	beq.w	8003540 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 8003392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_GPIO_Init+0x22c>)
 80033a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_GPIO_Init+0x230>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_GPIO_Init+0x234>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04a      	beq.n	8003470 <HAL_GPIO_Init+0x258>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_GPIO_Init+0x238>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_GPIO_Init+0x23c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <HAL_GPIO_Init+0x240>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_GPIO_Init+0x244>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x216>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_GPIO_Init+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x212>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <HAL_GPIO_Init+0x24c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <HAL_GPIO_Init+0x250>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x20a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a15      	ldr	r2, [pc, #84]	@ (800346c <HAL_GPIO_Init+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x206>
 800341a:	2309      	movs	r3, #9
 800341c:	e029      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800341e:	230a      	movs	r3, #10
 8003420:	e027      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003422:	2307      	movs	r3, #7
 8003424:	e025      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003426:	2306      	movs	r3, #6
 8003428:	e023      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342a:	2305      	movs	r3, #5
 800342c:	e021      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342e:	2304      	movs	r3, #4
 8003430:	e01f      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003432:	2303      	movs	r3, #3
 8003434:	e01d      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003436:	2302      	movs	r3, #2
 8003438:	e01b      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343a:	2301      	movs	r3, #1
 800343c:	e019      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343e:	bf00      	nop
 8003440:	58000080 	.word	0x58000080
 8003444:	58024400 	.word	0x58024400
 8003448:	58000400 	.word	0x58000400
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58020800 	.word	0x58020800
 8003458:	58020c00 	.word	0x58020c00
 800345c:	58021000 	.word	0x58021000
 8003460:	58021400 	.word	0x58021400
 8003464:	58021800 	.word	0x58021800
 8003468:	58021c00 	.word	0x58021c00
 800346c:	58022400 	.word	0x58022400
 8003470:	2300      	movs	r3, #0
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003482:	4938      	ldr	r1, [pc, #224]	@ (8003564 <HAL_GPIO_Init+0x34c>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f ae6b 	bne.w	800322c <HAL_GPIO_Init+0x14>
  }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3724      	adds	r7, #36	@ 0x24
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	58000400 	.word	0x58000400

08003568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
 8003574:	4613      	mov	r3, r2
 8003576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003578:	787b      	ldrb	r3, [r7, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003584:	e003      	b.n	800358e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	041a      	lsls	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f804 	bl	80035ce <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035ec:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_PWREx_ConfigSupply+0x70>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d00a      	beq.n	800360e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <HAL_PWREx_ConfigSupply+0x70>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e01f      	b.n	800364a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e01d      	b.n	800364a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800360e:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <HAL_PWREx_ConfigSupply+0x70>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 0207 	bic.w	r2, r3, #7
 8003616:	490f      	ldr	r1, [pc, #60]	@ (8003654 <HAL_PWREx_ConfigSupply+0x70>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800361e:	f7fd fbf5 	bl	8000e0c <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003624:	e009      	b.n	800363a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003626:	f7fd fbf1 	bl	8000e0c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003634:	d901      	bls.n	800363a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e007      	b.n	800364a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_PWREx_ConfigSupply+0x70>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003646:	d1ee      	bne.n	8003626 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	58024800 	.word	0x58024800

08003658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	@ 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e3c8      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8087 	beq.w	8003786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003678:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003682:	4b86      	ldr	r3, [pc, #536]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	2b10      	cmp	r3, #16
 800368c:	d007      	beq.n	800369e <HAL_RCC_OscConfig+0x46>
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b18      	cmp	r3, #24
 8003692:	d110      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d10b      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369e:	4b7f      	ldr	r3, [pc, #508]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d06c      	beq.n	8003784 <HAL_RCC_OscConfig+0x12c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3a2      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x76>
 80036c0:	4b76      	ldr	r3, [pc, #472]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a75      	ldr	r2, [pc, #468]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b71      	ldr	r3, [pc, #452]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a70      	ldr	r2, [pc, #448]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b6e      	ldr	r3, [pc, #440]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6d      	ldr	r2, [pc, #436]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0xbc>
 80036fa:	4b68      	ldr	r3, [pc, #416]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a67      	ldr	r2, [pc, #412]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b65      	ldr	r3, [pc, #404]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a64      	ldr	r2, [pc, #400]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 8003714:	4b61      	ldr	r3, [pc, #388]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a60      	ldr	r2, [pc, #384]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b5e      	ldr	r3, [pc, #376]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5d      	ldr	r2, [pc, #372]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fb6a 	bl	8000e0c <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fb66 	bl	8000e0c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	@ 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e356      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374e:	4b53      	ldr	r3, [pc, #332]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xe4>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd fb56 	bl	8000e0c <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fb52 	bl	8000e0c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e342      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003776:	4b49      	ldr	r3, [pc, #292]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x10c>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 808c 	beq.w	80038ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003794:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800379e:	4b3f      	ldr	r3, [pc, #252]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_RCC_OscConfig+0x162>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	d137      	bne.n	8003820 <HAL_RCC_OscConfig+0x1c8>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d132      	bne.n	8003820 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ba:	4b38      	ldr	r3, [pc, #224]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e314      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037d2:	4b32      	ldr	r3, [pc, #200]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0219 	bic.w	r2, r3, #25
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	492f      	ldr	r1, [pc, #188]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fb12 	bl	8000e0c <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ec:	f7fd fb0e 	bl	8000e0c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e2fe      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fe:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b24      	ldr	r3, [pc, #144]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	4920      	ldr	r1, [pc, #128]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381e:	e045      	b.n	80038ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d026      	beq.n	8003876 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003828:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 0219 	bic.w	r2, r3, #25
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4919      	ldr	r1, [pc, #100]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd fae7 	bl	8000e0c <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7fd fae3 	bl	8000e0c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e2d3      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	490b      	ldr	r1, [pc, #44]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
 8003874:	e01a      	b.n	80038ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a08      	ldr	r2, [pc, #32]	@ (800389c <HAL_RCC_OscConfig+0x244>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fac3 	bl	8000e0c <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fd fabf 	bl	8000e0c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d903      	bls.n	80038a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e2af      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
 800389c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038a0:	4b96      	ldr	r3, [pc, #600]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ee      	bne.n	800388a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d06a      	beq.n	800398e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b8:	4b90      	ldr	r3, [pc, #576]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038c2:	4b8e      	ldr	r3, [pc, #568]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d007      	beq.n	80038de <HAL_RCC_OscConfig+0x286>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b18      	cmp	r3, #24
 80038d2:	d11b      	bne.n	800390c <HAL_RCC_OscConfig+0x2b4>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d116      	bne.n	800390c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038de:	4b87      	ldr	r3, [pc, #540]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x29e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e282      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f6:	4b81      	ldr	r3, [pc, #516]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	497d      	ldr	r1, [pc, #500]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800390a:	e040      	b.n	800398e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003914:	4b79      	ldr	r3, [pc, #484]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a78      	ldr	r2, [pc, #480]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 800391a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fa74 	bl	8000e0c <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003928:	f7fd fa70 	bl	8000e0c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e260      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800393a:	4b70      	ldr	r3, [pc, #448]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003946:	4b6d      	ldr	r3, [pc, #436]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	4969      	ldr	r1, [pc, #420]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
 800395a:	e018      	b.n	800398e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800395c:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a66      	ldr	r2, [pc, #408]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd fa50 	bl	8000e0c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003970:	f7fd fa4c 	bl	8000e0c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e23c      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003982:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d036      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b56      	ldr	r3, [pc, #344]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a6:	4a55      	ldr	r2, [pc, #340]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fa2d 	bl	8000e0c <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fd fa29 	bl	8000e0c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e219      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c8:	4b4c      	ldr	r3, [pc, #304]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x35e>
 80039d4:	e018      	b.n	8003a08 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039da:	4a48      	ldr	r2, [pc, #288]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fa13 	bl	8000e0c <HAL_GetTick>
 80039e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fd fa0f 	bl	8000e0c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1ff      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039fc:	4b3f      	ldr	r3, [pc, #252]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d036      	beq.n	8003a82 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d019      	beq.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a1c:	4b37      	ldr	r3, [pc, #220]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a36      	ldr	r2, [pc, #216]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a28:	f7fd f9f0 	bl	8000e0c <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a30:	f7fd f9ec 	bl	8000e0c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1dc      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a42:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x3d8>
 8003a4e:	e018      	b.n	8003a82 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a50:	4b2a      	ldr	r3, [pc, #168]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a29      	ldr	r2, [pc, #164]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd f9d6 	bl	8000e0c <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a64:	f7fd f9d2 	bl	8000e0c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1c2      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a76:	4b21      	ldr	r3, [pc, #132]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8086 	beq.w	8003b9c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <HAL_RCC_OscConfig+0x4a8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <HAL_RCC_OscConfig+0x4a8>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a9c:	f7fd f9b6 	bl	8000e0c <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa4:	f7fd f9b2 	bl	8000e0c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1a2      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_RCC_OscConfig+0x4a8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x480>
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	4a0b      	ldr	r2, [pc, #44]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_OscConfig+0x4e6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d111      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4ac>
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a02      	ldr	r2, [pc, #8]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af8:	e021      	b.n	8003b3e <HAL_RCC_OscConfig+0x4e6>
 8003afa:	bf00      	nop
 8003afc:	58024400 	.word	0x58024400
 8003b00:	58024800 	.word	0x58024800
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCC_OscConfig+0x4ce>
 8003b0c:	4b83      	ldr	r3, [pc, #524]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a82      	ldr	r2, [pc, #520]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	4b80      	ldr	r3, [pc, #512]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	e00b      	b.n	8003b3e <HAL_RCC_OscConfig+0x4e6>
 8003b26:	4b7d      	ldr	r3, [pc, #500]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	4b7a      	ldr	r3, [pc, #488]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a79      	ldr	r2, [pc, #484]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d015      	beq.n	8003b72 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fd f961 	bl	8000e0c <HAL_GetTick>
 8003b4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fd f95d 	bl	8000e0c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e14b      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b64:	4b6d      	ldr	r3, [pc, #436]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ee      	beq.n	8003b4e <HAL_RCC_OscConfig+0x4f6>
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fd f94b 	bl	8000e0c <HAL_GetTick>
 8003b76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd f947 	bl	8000e0c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e135      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b90:	4b62      	ldr	r3, [pc, #392]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ee      	bne.n	8003b7a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 812a 	beq.w	8003dfa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bae:	2b18      	cmp	r3, #24
 8003bb0:	f000 80ba 	beq.w	8003d28 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	f040 8095 	bne.w	8003ce8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b57      	ldr	r3, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd f91f 	bl	8000e0c <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd f91b 	bl	8000e0c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e10b      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <HAL_RCC_OscConfig+0x6c8>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	430a      	orrs	r2, r1
 8003c04:	4945      	ldr	r1, [pc, #276]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	025b      	lsls	r3, r3, #9
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	3b01      	subs	r3, #1
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c3a:	4938      	ldr	r1, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4a35      	ldr	r2, [pc, #212]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c4c:	4b33      	ldr	r3, [pc, #204]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c50:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x6cc>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c58:	00d2      	lsls	r2, r2, #3
 8003c5a:	4930      	ldr	r1, [pc, #192]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c60:	4b2e      	ldr	r3, [pc, #184]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	f023 020c 	bic.w	r2, r3, #12
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	492b      	ldr	r1, [pc, #172]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c72:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c76:	f023 0202 	bic.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	4927      	ldr	r1, [pc, #156]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c84:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	4a24      	ldr	r2, [pc, #144]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b19      	ldr	r3, [pc, #100]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f8a4 	bl	8000e0c <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f8a0 	bl	8000e0c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e090      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x670>
 8003ce6:	e088      	b.n	8003dfa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0b      	ldr	r2, [pc, #44]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f88a 	bl	8000e0c <HAL_GetTick>
 8003cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd f886 	bl	8000e0c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e076      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0e:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_OscConfig+0x6c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a4>
 8003d1a:	e06e      	b.n	8003dfa <HAL_RCC_OscConfig+0x7a2>
 8003d1c:	58024400 	.word	0x58024400
 8003d20:	fffffc0c 	.word	0xfffffc0c
 8003d24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d2e:	4b35      	ldr	r3, [pc, #212]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d031      	beq.n	8003da0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d12a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d122      	bne.n	8003da0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	0a5b      	lsrs	r3, r3, #9
 8003d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d108      	bne.n	8003da0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0e1b      	lsrs	r3, r3, #24
 8003d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e02b      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003da4:	4b17      	ldr	r3, [pc, #92]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d01f      	beq.n	8003dfa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dba:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc6:	f7fd f821 	bl	8000e0c <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dcc:	bf00      	nop
 8003dce:	f7fd f81d 	bl	8000e0c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d0f9      	beq.n	8003dce <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dda:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dde:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <HAL_RCC_OscConfig+0x7b0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003de6:	00d2      	lsls	r2, r2, #3
 8003de8:	4906      	ldr	r1, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dee:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <HAL_RCC_OscConfig+0x7ac>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3730      	adds	r7, #48	@ 0x30
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	58024400 	.word	0x58024400
 8003e08:	ffff0007 	.word	0xffff0007

08003e0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e19c      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b8a      	ldr	r3, [pc, #552]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d910      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b87      	ldr	r3, [pc, #540]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 020f 	bic.w	r2, r3, #15
 8003e36:	4985      	ldr	r1, [pc, #532]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b83      	ldr	r3, [pc, #524]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e184      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	4b7b      	ldr	r3, [pc, #492]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d908      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e6c:	4b78      	ldr	r3, [pc, #480]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	4975      	ldr	r1, [pc, #468]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	4b70      	ldr	r3, [pc, #448]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d908      	bls.n	8003eac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	496a      	ldr	r1, [pc, #424]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	4b64      	ldr	r3, [pc, #400]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d908      	bls.n	8003eda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ec8:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	495e      	ldr	r1, [pc, #376]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	4b59      	ldr	r3, [pc, #356]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d908      	bls.n	8003f08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ef6:	4b56      	ldr	r3, [pc, #344]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4953      	ldr	r1, [pc, #332]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d908      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f023 020f 	bic.w	r2, r3, #15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4947      	ldr	r1, [pc, #284]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d055      	beq.n	8003fee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f42:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4940      	ldr	r1, [pc, #256]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d121      	bne.n	8003fac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0f6      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0ea      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f8c:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0de      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0d6      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fac:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f023 0207 	bic.w	r2, r3, #7
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4925      	ldr	r1, [pc, #148]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fc ff25 	bl	8000e0c <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc6:	f7fc ff21 	bl	8000e0c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0be      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d1eb      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d010      	beq.n	800401c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	429a      	cmp	r2, r3
 8004008:	d208      	bcs.n	800401c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400a:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	490e      	ldr	r1, [pc, #56]	@ (8004050 <HAL_RCC_ClockConfig+0x244>)
 8004018:	4313      	orrs	r3, r2
 800401a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d214      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4906      	ldr	r1, [pc, #24]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b04      	ldr	r3, [pc, #16]	@ (800404c <HAL_RCC_ClockConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e086      	b.n	800415a <HAL_RCC_ClockConfig+0x34e>
 800404c:	52002000 	.word	0x52002000
 8004050:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	4b3f      	ldr	r3, [pc, #252]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800406c:	429a      	cmp	r2, r3
 800406e:	d208      	bcs.n	8004082 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004070:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4939      	ldr	r1, [pc, #228]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 800407e:	4313      	orrs	r3, r2
 8004080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d010      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	4b34      	ldr	r3, [pc, #208]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800409a:	429a      	cmp	r2, r3
 800409c:	d208      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800409e:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	492e      	ldr	r1, [pc, #184]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	4b28      	ldr	r3, [pc, #160]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d208      	bcs.n	80040de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040cc:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	4922      	ldr	r1, [pc, #136]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d208      	bcs.n	800410c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4917      	ldr	r1, [pc, #92]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 8004108:	4313      	orrs	r3, r2
 800410a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800410c:	f000 f834 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	4912      	ldr	r1, [pc, #72]	@ (8004168 <HAL_RCC_ClockConfig+0x35c>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800412a:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <HAL_RCC_ClockConfig+0x358>)
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	4a0d      	ldr	r2, [pc, #52]	@ (8004168 <HAL_RCC_ClockConfig+0x35c>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
 8004140:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <HAL_RCC_ClockConfig+0x360>)
 8004142:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004144:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <HAL_RCC_ClockConfig+0x364>)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800414a:	4b0a      	ldr	r3, [pc, #40]	@ (8004174 <HAL_RCC_ClockConfig+0x368>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fe12 	bl	8000d78 <HAL_InitTick>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400
 8004168:	08007dc4 	.word	0x08007dc4
 800416c:	24000004 	.word	0x24000004
 8004170:	24000000 	.word	0x24000000
 8004174:	24000008 	.word	0x24000008

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	@ 0x24
 800417c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417e:	4bb3      	ldr	r3, [pc, #716]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004186:	2b18      	cmp	r3, #24
 8004188:	f200 8155 	bhi.w	8004436 <HAL_RCC_GetSysClockFreq+0x2be>
 800418c:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <HAL_RCC_GetSysClockFreq+0x1c>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041f9 	.word	0x080041f9
 8004198:	08004437 	.word	0x08004437
 800419c:	08004437 	.word	0x08004437
 80041a0:	08004437 	.word	0x08004437
 80041a4:	08004437 	.word	0x08004437
 80041a8:	08004437 	.word	0x08004437
 80041ac:	08004437 	.word	0x08004437
 80041b0:	08004437 	.word	0x08004437
 80041b4:	0800421f 	.word	0x0800421f
 80041b8:	08004437 	.word	0x08004437
 80041bc:	08004437 	.word	0x08004437
 80041c0:	08004437 	.word	0x08004437
 80041c4:	08004437 	.word	0x08004437
 80041c8:	08004437 	.word	0x08004437
 80041cc:	08004437 	.word	0x08004437
 80041d0:	08004437 	.word	0x08004437
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004437 	.word	0x08004437
 80041dc:	08004437 	.word	0x08004437
 80041e0:	08004437 	.word	0x08004437
 80041e4:	08004437 	.word	0x08004437
 80041e8:	08004437 	.word	0x08004437
 80041ec:	08004437 	.word	0x08004437
 80041f0:	08004437 	.word	0x08004437
 80041f4:	0800422b 	.word	0x0800422b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f8:	4b94      	ldr	r3, [pc, #592]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004204:	4b91      	ldr	r3, [pc, #580]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	4a90      	ldr	r2, [pc, #576]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004216:	e111      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004218:	4b8d      	ldr	r3, [pc, #564]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800421a:	61bb      	str	r3, [r7, #24]
      break;
 800421c:	e10e      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800421e:	4b8d      	ldr	r3, [pc, #564]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004220:	61bb      	str	r3, [r7, #24]
      break;
 8004222:	e10b      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004224:	4b8c      	ldr	r3, [pc, #560]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004226:	61bb      	str	r3, [r7, #24]
      break;
 8004228:	e108      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800422a:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004234:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800423e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004240:	4b82      	ldr	r3, [pc, #520]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800424a:	4b80      	ldr	r3, [pc, #512]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80e1 	beq.w	8004430 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f000 8083 	beq.w	800437c <HAL_RCC_GetSysClockFreq+0x204>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f200 80a1 	bhi.w	80043c0 <HAL_RCC_GetSysClockFreq+0x248>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x114>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d056      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x1c0>
 800428a:	e099      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800428c:	4b6f      	ldr	r3, [pc, #444]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004298:	4b6c      	ldr	r3, [pc, #432]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b62      	ldr	r3, [pc, #392]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042f2:	e087      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004460 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b51      	ldr	r3, [pc, #324]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a02 	vldr	s12, [r7, #8]
 800431a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e4>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004336:	e065      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004464 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b40      	ldr	r3, [pc, #256]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a02 	vldr	s12, [r7, #8]
 800435e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800437a:	e043      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004468 <HAL_RCC_GetSysClockFreq+0x2f0>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b2f      	ldr	r3, [pc, #188]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043be:	e021      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004464 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b1e      	ldr	r3, [pc, #120]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004402:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004404:	4b11      	ldr	r3, [pc, #68]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	0a5b      	lsrs	r3, r3, #9
 800440a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440e:	3301      	adds	r3, #1
 8004410:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800441c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004428:	ee17 3a90 	vmov	r3, s15
 800442c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800442e:	e005      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
      break;
 8004434:	e002      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004436:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004438:	61bb      	str	r3, [r7, #24]
      break;
 800443a:	bf00      	nop
  }

  return sysclockfreq;
 800443c:	69bb      	ldr	r3, [r7, #24]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3724      	adds	r7, #36	@ 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
 8004450:	03d09000 	.word	0x03d09000
 8004454:	003d0900 	.word	0x003d0900
 8004458:	017d7840 	.word	0x017d7840
 800445c:	46000000 	.word	0x46000000
 8004460:	4c742400 	.word	0x4c742400
 8004464:	4a742400 	.word	0x4a742400
 8004468:	4bbebc20 	.word	0x4bbebc20

0800446c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004472:	f7ff fe81 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b10      	ldr	r3, [pc, #64]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x50>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490f      	ldr	r1, [pc, #60]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x50>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4a09      	ldr	r2, [pc, #36]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	fa22 f303 	lsr.w	r3, r2, r3
 80044a6:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044aa:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044b0:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	58024400 	.word	0x58024400
 80044c0:	08007dc4 	.word	0x08007dc4
 80044c4:	24000004 	.word	0x24000004
 80044c8:	24000000 	.word	0x24000000

080044cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044d0:	f7ff ffcc 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4904      	ldr	r1, [pc, #16]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	58024400 	.word	0x58024400
 80044f4:	08007dc4 	.word	0x08007dc4

080044f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b0c6      	sub	sp, #280	@ 0x118
 80044fe:	af00      	add	r7, sp, #0
 8004500:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004504:	2300      	movs	r3, #0
 8004506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800451c:	2500      	movs	r5, #0
 800451e:	ea54 0305 	orrs.w	r3, r4, r5
 8004522:	d049      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800452e:	d02f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004530:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004534:	d828      	bhi.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800453a:	d01a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800453c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004540:	d822      	bhi.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800454a:	d007      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800454c:	e01c      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454e:	4bab      	ldr	r3, [pc, #684]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	4aaa      	ldr	r2, [pc, #680]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800455a:	e01a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	3308      	adds	r3, #8
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f002 fa49 	bl	80069fc <RCCEx_PLL2_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004570:	e00f      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	3328      	adds	r3, #40	@ 0x28
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f002 faf0 	bl	8006b60 <RCCEx_PLL3_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800459a:	4b98      	ldr	r3, [pc, #608]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a8:	4a94      	ldr	r2, [pc, #592]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80045ae:	e003      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80045c4:	f04f 0900 	mov.w	r9, #0
 80045c8:	ea58 0309 	orrs.w	r3, r8, r9
 80045cc:	d047      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d82a      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f5 	.word	0x080045f5
 80045e4:	08004603 	.word	0x08004603
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004637 	.word	0x08004637
 80045f0:	08004637 	.word	0x08004637
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f4:	4b81      	ldr	r3, [pc, #516]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	4a80      	ldr	r2, [pc, #512]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004600:	e01a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004606:	3308      	adds	r3, #8
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f002 f9f6 	bl	80069fc <RCCEx_PLL2_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004616:	e00f      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	3328      	adds	r3, #40	@ 0x28
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f002 fa9d 	bl	8006b60 <RCCEx_PLL3_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004640:	4b6e      	ldr	r3, [pc, #440]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	f023 0107 	bic.w	r1, r3, #7
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	4a6b      	ldr	r2, [pc, #428]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6513      	str	r3, [r2, #80]	@ 0x50
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800466a:	f04f 0b00 	mov.w	fp, #0
 800466e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004672:	d05b      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800467c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004680:	d03b      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004682:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004686:	d834      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004688:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800468c:	d037      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004692:	d82e      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004694:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004698:	d033      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800469a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800469e:	d828      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046a4:	d01a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046aa:	d822      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80046b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b4:	d007      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80046b6:	e01c      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4b50      	ldr	r3, [pc, #320]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	4a4f      	ldr	r2, [pc, #316]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e01e      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ca:	3308      	adds	r3, #8
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f002 f994 	bl	80069fc <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046da:	e013      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e0:	3328      	adds	r3, #40	@ 0x28
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 fa3b 	bl	8006b60 <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800470c:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800471c:	4a37      	ldr	r2, [pc, #220]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800471e:	430b      	orrs	r3, r1
 8004720:	6593      	str	r3, [r2, #88]	@ 0x58
 8004722:	e003      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004742:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d05d      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004754:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004758:	d03b      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800475a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800475e:	d834      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004764:	d037      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800476a:	d82e      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800476c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004770:	d033      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004772:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004776:	d828      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800477c:	d01a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800477e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004782:	d822      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800478c:	d007      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800478e:	e01c      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800479c:	e01e      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800479e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a2:	3308      	adds	r3, #8
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f002 f928 	bl	80069fc <RCCEx_PLL2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047b2:	e013      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b8:	3328      	adds	r3, #40	@ 0x28
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 f9cf 	bl	8006b60 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c8:	e008      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047d0:	e004      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047d2:	bf00      	nop
 80047d4:	e002      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80047ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047f4:	4a01      	ldr	r2, [pc, #4]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fa:	e005      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80047fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004814:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800481e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d03a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	2b30      	cmp	r3, #48	@ 0x30
 8004830:	d01f      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004832:	2b30      	cmp	r3, #48	@ 0x30
 8004834:	d819      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004836:	2b20      	cmp	r3, #32
 8004838:	d00c      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800483a:	2b20      	cmp	r3, #32
 800483c:	d815      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d019      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004842:	2b10      	cmp	r3, #16
 8004844:	d111      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004846:	4baa      	ldr	r3, [pc, #680]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484a:	4aa9      	ldr	r2, [pc, #676]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800484c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004852:	e011      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004858:	3308      	adds	r3, #8
 800485a:	2102      	movs	r1, #2
 800485c:	4618      	mov	r0, r3
 800485e:	f002 f8cd 	bl	80069fc <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004868:	e006      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004870:	e002      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004880:	4b9b      	ldr	r3, [pc, #620]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004884:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	4a98      	ldr	r2, [pc, #608]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004890:	430b      	orrs	r3, r1
 8004892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004894:	e003      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800489a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800489e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80048aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d051      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048c8:	d035      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80048ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ce:	d82e      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048d4:	d031      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80048d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048da:	d828      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e0:	d01a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e6:	d822      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f0:	d007      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80048f2:	e01c      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b7e      	ldr	r3, [pc, #504]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	4a7d      	ldr	r2, [pc, #500]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004900:	e01c      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004906:	3308      	adds	r3, #8
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f876 	bl	80069fc <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004916:	e011      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491c:	3328      	adds	r3, #40	@ 0x28
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f002 f91d 	bl	8006b60 <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800493a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004944:	4b6a      	ldr	r3, [pc, #424]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	4a67      	ldr	r2, [pc, #412]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6513      	str	r3, [r2, #80]	@ 0x50
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800495e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800496e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004978:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d053      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800498c:	d033      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800498e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004992:	d82c      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004998:	d02f      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800499a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800499e:	d826      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049a4:	d02b      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80049a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049aa:	d820      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049b0:	d012      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80049b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049b6:	d81a      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d022      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c0:	d115      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c6:	3308      	adds	r3, #8
 80049c8:	2101      	movs	r1, #1
 80049ca:	4618      	mov	r0, r3
 80049cc:	f002 f816 	bl	80069fc <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049d6:	e015      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049dc:	3328      	adds	r3, #40	@ 0x28
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 f8bd 	bl	8006b60 <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049ec:	e00a      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049f6:	bf00      	nop
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a0c:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1a:	4a35      	ldr	r2, [pc, #212]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d058      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a56:	d033      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a5c:	d82c      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a62:	d02f      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a68:	d826      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a6e:	d02b      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004a70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a74:	d820      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a7a:	d012      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a80:	d81a      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d022      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a8a:	d115      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a90:	3308      	adds	r3, #8
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 ffb1 	bl	80069fc <RCCEx_PLL2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004aa0:	e015      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa6:	3328      	adds	r3, #40	@ 0x28
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 f858 	bl	8006b60 <RCCEx_PLL3_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ab6:	e00a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ac0:	bf00      	nop
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10e      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ae6:	4a02      	ldr	r2, [pc, #8]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aec:	e006      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004aee:	bf00      	nop
 8004af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004af8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004b12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d037      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b26:	d00e      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b2c:	d816      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b36:	d111      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4bc4      	ldr	r3, [pc, #784]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	4ac3      	ldr	r2, [pc, #780]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b44:	e00f      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 ff54 	bl	80069fc <RCCEx_PLL2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b6e:	4bb7      	ldr	r3, [pc, #732]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7c:	4ab3      	ldr	r2, [pc, #716]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004b98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ba2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d039      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d81c      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bcd 	.word	0x08004bcd
 8004bc4:	08004bdb 	.word	0x08004bdb
 8004bc8:	08004bf9 	.word	0x08004bf9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bcc:	4b9f      	ldr	r3, [pc, #636]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd0:	4a9e      	ldr	r2, [pc, #632]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bd8:	e00f      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bde:	3308      	adds	r3, #8
 8004be0:	2102      	movs	r1, #2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 ff0a 	bl	80069fc <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bee:	e004      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c02:	4b92      	ldr	r3, [pc, #584]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c06:	f023 0103 	bic.w	r1, r3, #3
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c10:	4a8e      	ldr	r2, [pc, #568]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f000 8099 	beq.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c42:	4b83      	ldr	r3, [pc, #524]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a82      	ldr	r2, [pc, #520]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4e:	f7fc f8dd 	bl	8000e0c <HAL_GetTick>
 8004c52:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c56:	e00b      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c58:	f7fc f8d8 	bl	8000e0c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	@ 0x64
 8004c66:	d903      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c6e:	e005      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c70:	4b77      	ldr	r3, [pc, #476]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ed      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d173      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c84:	4b71      	ldr	r3, [pc, #452]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c90:	4053      	eors	r3, r2
 8004c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ca6:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a68      	ldr	r2, [pc, #416]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb2:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	4a65      	ldr	r2, [pc, #404]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cbe:	4a63      	ldr	r2, [pc, #396]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd2:	d118      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc f89a 	bl	8000e0c <HAL_GetTick>
 8004cd8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cdc:	e00d      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fc f895 	bl	8000e0c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d903      	bls.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cfa:	4b54      	ldr	r3, [pc, #336]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0eb      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d129      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1e:	d10e      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004d20:	4b4a      	ldr	r3, [pc, #296]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d30:	091a      	lsrs	r2, r3, #4
 8004d32:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	4a45      	ldr	r2, [pc, #276]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6113      	str	r3, [r2, #16]
 8004d3c:	e005      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d3e:	4b43      	ldr	r3, [pc, #268]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	4a42      	ldr	r2, [pc, #264]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d48:	6113      	str	r3, [r2, #16]
 8004d4a:	4b40      	ldr	r3, [pc, #256]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d60:	e008      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004d6a:	e003      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 0301 	and.w	r3, r2, #1
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f000 808f 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d9c:	2b28      	cmp	r3, #40	@ 0x28
 8004d9e:	d871      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004e8d 	.word	0x08004e8d
 8004dac:	08004e85 	.word	0x08004e85
 8004db0:	08004e85 	.word	0x08004e85
 8004db4:	08004e85 	.word	0x08004e85
 8004db8:	08004e85 	.word	0x08004e85
 8004dbc:	08004e85 	.word	0x08004e85
 8004dc0:	08004e85 	.word	0x08004e85
 8004dc4:	08004e85 	.word	0x08004e85
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e85 	.word	0x08004e85
 8004dd0:	08004e85 	.word	0x08004e85
 8004dd4:	08004e85 	.word	0x08004e85
 8004dd8:	08004e85 	.word	0x08004e85
 8004ddc:	08004e85 	.word	0x08004e85
 8004de0:	08004e85 	.word	0x08004e85
 8004de4:	08004e85 	.word	0x08004e85
 8004de8:	08004e6f 	.word	0x08004e6f
 8004dec:	08004e85 	.word	0x08004e85
 8004df0:	08004e85 	.word	0x08004e85
 8004df4:	08004e85 	.word	0x08004e85
 8004df8:	08004e85 	.word	0x08004e85
 8004dfc:	08004e85 	.word	0x08004e85
 8004e00:	08004e85 	.word	0x08004e85
 8004e04:	08004e85 	.word	0x08004e85
 8004e08:	08004e8d 	.word	0x08004e8d
 8004e0c:	08004e85 	.word	0x08004e85
 8004e10:	08004e85 	.word	0x08004e85
 8004e14:	08004e85 	.word	0x08004e85
 8004e18:	08004e85 	.word	0x08004e85
 8004e1c:	08004e85 	.word	0x08004e85
 8004e20:	08004e85 	.word	0x08004e85
 8004e24:	08004e85 	.word	0x08004e85
 8004e28:	08004e8d 	.word	0x08004e8d
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004e85 	.word	0x08004e85
 8004e38:	08004e85 	.word	0x08004e85
 8004e3c:	08004e85 	.word	0x08004e85
 8004e40:	08004e85 	.word	0x08004e85
 8004e44:	08004e85 	.word	0x08004e85
 8004e48:	08004e8d 	.word	0x08004e8d
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	58024800 	.word	0x58024800
 8004e54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 fdcb 	bl	80069fc <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e6c:	e00f      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e72:	3328      	adds	r3, #40	@ 0x28
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fe72 	bl	8006b60 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e82:	e004      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e8a:	e000      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e96:	4bbf      	ldr	r3, [pc, #764]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea4:	4abb      	ldr	r2, [pc, #748]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eaa:	e003      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f002 0302 	and.w	r3, r2, #2
 8004ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d041      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d824      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004ede:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004efd 	.word	0x08004efd
 8004eec:	08004f13 	.word	0x08004f13
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f00:	3308      	adds	r3, #8
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fd79 	bl	80069fc <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f10:	e00f      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f16:	3328      	adds	r3, #40	@ 0x28
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fe20 	bl	8006b60 <RCCEx_PLL3_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f3a:	4b96      	ldr	r3, [pc, #600]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3e:	f023 0107 	bic.w	r1, r3, #7
 8004f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f48:	4a92      	ldr	r2, [pc, #584]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f002 0304 	and.w	r3, r2, #4
 8004f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d044      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d825      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004f84:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fbb 	.word	0x08004fbb
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fd9 	.word	0x08004fd9
 8004fa0:	08004fd9 	.word	0x08004fd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa8:	3308      	adds	r3, #8
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fd25 	bl	80069fc <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00f      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbe:	3328      	adds	r3, #40	@ 0x28
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fdcc 	bl	8006b60 <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fce:	e004      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	f023 0107 	bic.w	r1, r3, #7
 8004fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	4a68      	ldr	r2, [pc, #416]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f002 0320 	and.w	r3, r2, #32
 800500e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005018:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800501c:	460b      	mov	r3, r1
 800501e:	4313      	orrs	r3, r2
 8005020:	d055      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800502a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800502e:	d033      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005034:	d82c      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005040:	d826      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005042:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005046:	d02b      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005048:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800504c:	d820      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800504e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005052:	d012      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005058:	d81a      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d022      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800505e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005062:	d115      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005068:	3308      	adds	r3, #8
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f001 fcc5 	bl	80069fc <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005078:	e015      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507e:	3328      	adds	r3, #40	@ 0x28
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fd6c 	bl	8006b60 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800508e:	e00a      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005096:	e006      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005098:	bf00      	nop
 800509a:	e004      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800509c:	bf00      	nop
 800509e:	e002      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ae:	4b39      	ldr	r3, [pc, #228]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050be:	4a35      	ldr	r2, [pc, #212]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80050c4:	e003      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80050da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050de:	2300      	movs	r3, #0
 80050e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d058      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050fa:	d033      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80050fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005100:	d82c      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005106:	d02f      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510c:	d826      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800510e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005112:	d02b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005114:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005118:	d820      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511e:	d012      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005124:	d81a      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d022      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512e:	d115      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005134:	3308      	adds	r3, #8
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fc5f 	bl	80069fc <RCCEx_PLL2_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005144:	e015      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514a:	3328      	adds	r3, #40	@ 0x28
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f001 fd06 	bl	8006b60 <RCCEx_PLL3_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800515a:	e00a      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005162:	e006      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005164:	bf00      	nop
 8005166:	e004      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005168:	bf00      	nop
 800516a:	e002      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10e      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800518a:	4a02      	ldr	r2, [pc, #8]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800518c:	430b      	orrs	r3, r1
 800518e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005192:	bf00      	nop
 8005194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800519c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80051ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d055      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051cc:	d033      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80051ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051d2:	d82c      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d8:	d02f      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051de:	d826      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051e4:	d02b      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80051e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051ea:	d820      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f0:	d012      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80051f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f6:	d81a      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d022      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005200:	d115      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005206:	3308      	adds	r3, #8
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f001 fbf6 	bl	80069fc <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005216:	e015      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521c:	3328      	adds	r3, #40	@ 0x28
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f001 fc9d 	bl	8006b60 <RCCEx_PLL3_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800522c:	e00a      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005236:	bf00      	nop
 8005238:	e004      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800523a:	bf00      	nop
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800524c:	4ba0      	ldr	r3, [pc, #640]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005258:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800525c:	4a9c      	ldr	r2, [pc, #624]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800525e:	430b      	orrs	r3, r1
 8005260:	6593      	str	r3, [r2, #88]	@ 0x58
 8005262:	e003      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f002 0308 	and.w	r3, r2, #8
 8005278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005282:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005286:	460b      	mov	r3, r1
 8005288:	4313      	orrs	r3, r2
 800528a:	d01e      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005298:	d10c      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	3328      	adds	r3, #40	@ 0x28
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fc5c 	bl	8006b60 <RCCEx_PLL3_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052b4:	4b86      	ldr	r3, [pc, #536]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c4:	4a82      	ldr	r2, [pc, #520]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f002 0310 	and.w	r3, r2, #16
 80052d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d01e      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f6:	d10c      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fc:	3328      	adds	r3, #40	@ 0x28
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fc2d 	bl	8006b60 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005312:	4b6f      	ldr	r3, [pc, #444]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005322:	4a6b      	ldr	r2, [pc, #428]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005336:	2300      	movs	r3, #0
 8005338:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800533a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	d03e      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005350:	d022      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005356:	d81b      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005360:	d00b      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005362:	e015      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005368:	3308      	adds	r3, #8
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f001 fb45 	bl	80069fc <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005378:	e00f      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537e:	3328      	adds	r3, #40	@ 0x28
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fbec 	bl	8006b60 <RCCEx_PLL3_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a2:	4b4b      	ldr	r3, [pc, #300]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053b2:	4a47      	ldr	r2, [pc, #284]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80053ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80053d0:	2300      	movs	r3, #0
 80053d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80053d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053ea:	d01f      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80053ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053f0:	d818      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80053f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053fc:	d007      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80053fe:	e011      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4b33      	ldr	r3, [pc, #204]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	4a32      	ldr	r2, [pc, #200]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800540a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800540c:	e00f      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005412:	3328      	adds	r3, #40	@ 0x28
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fba2 	bl	8006b60 <RCCEx_PLL3_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005422:	e004      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800542c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005436:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005446:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6553      	str	r3, [r2, #84]	@ 0x54
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005464:	2300      	movs	r3, #0
 8005466:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005468:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800546c:	460b      	mov	r3, r1
 800546e:	4313      	orrs	r3, r2
 8005470:	d034      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005480:	d007      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005482:	e011      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005490:	e00e      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005496:	3308      	adds	r3, #8
 8005498:	2102      	movs	r1, #2
 800549a:	4618      	mov	r0, r3
 800549c:	f001 faae 	bl	80069fc <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054a6:	e003      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	4a02      	ldr	r2, [pc, #8]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80054e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ea:	2300      	movs	r3, #0
 80054ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80054ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d00c      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	3328      	adds	r3, #40	@ 0x28
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f001 fb2d 	bl	8006b60 <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800551e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005520:	2300      	movs	r3, #0
 8005522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005524:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005528:	460b      	mov	r3, r1
 800552a:	4313      	orrs	r3, r2
 800552c:	d036      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800552e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005538:	d018      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800553a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800553e:	d811      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005544:	d014      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800554a:	d80b      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005556:	4bb7      	ldr	r3, [pc, #732]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	4ab6      	ldr	r2, [pc, #728]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800555c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005562:	e008      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557e:	4bad      	ldr	r3, [pc, #692]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800558c:	4aa9      	ldr	r2, [pc, #676]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800558e:	430b      	orrs	r3, r1
 8005590:	6553      	str	r3, [r2, #84]	@ 0x54
 8005592:	e003      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80055aa:	2300      	movs	r3, #0
 80055ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055b2:	460b      	mov	r3, r1
 80055b4:	4313      	orrs	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a9b      	ldr	r2, [pc, #620]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055da:	2300      	movs	r3, #0
 80055dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e8:	4b92      	ldr	r3, [pc, #584]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f6:	4a8f      	ldr	r2, [pc, #572]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005608:	643b      	str	r3, [r7, #64]	@ 0x40
 800560a:	2300      	movs	r3, #0
 800560c:	647b      	str	r3, [r7, #68]	@ 0x44
 800560e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005618:	4b86      	ldr	r3, [pc, #536]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	4a85      	ldr	r2, [pc, #532]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800561e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005622:	6113      	str	r3, [r2, #16]
 8005624:	4b83      	ldr	r3, [pc, #524]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005626:	6919      	ldr	r1, [r3, #16]
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005630:	4a80      	ldr	r2, [pc, #512]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005632:	430b      	orrs	r3, r1
 8005634:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005648:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005652:	4b78      	ldr	r3, [pc, #480]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005656:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	4a74      	ldr	r2, [pc, #464]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005662:	430b      	orrs	r3, r1
 8005664:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005672:	633b      	str	r3, [r7, #48]	@ 0x30
 8005674:	2300      	movs	r3, #0
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
 8005678:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005682:	4b6c      	ldr	r3, [pc, #432]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	4a68      	ldr	r2, [pc, #416]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	2100      	movs	r1, #0
 80056a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d011      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b8:	3308      	adds	r3, #8
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 f99d 	bl	80069fc <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	2100      	movs	r1, #0
 80056e2:	6239      	str	r1, [r7, #32]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d011      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f8:	3308      	adds	r3, #8
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f97d 	bl	80069fc <RCCEx_PLL2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	2100      	movs	r1, #0
 8005722:	61b9      	str	r1, [r7, #24]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d011      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	3308      	adds	r3, #8
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f95d 	bl	80069fc <RCCEx_PLL2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	2100      	movs	r1, #0
 8005762:	6139      	str	r1, [r7, #16]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800576e:	460b      	mov	r3, r1
 8005770:	4313      	orrs	r3, r2
 8005772:	d011      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	3328      	adds	r3, #40	@ 0x28
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f9ef 	bl	8006b60 <RCCEx_PLL3_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	2100      	movs	r1, #0
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d011      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	3328      	adds	r3, #40	@ 0x28
 80057ba:	2101      	movs	r1, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f9cf 	bl	8006b60 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	2100      	movs	r1, #0
 80057e2:	6039      	str	r1, [r7, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d011      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	3328      	adds	r3, #40	@ 0x28
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f9af 	bl	8006b60 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005818:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
}
 8005826:	4618      	mov	r0, r3
 8005828:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800582c:	46bd      	mov	sp, r7
 800582e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005832:	bf00      	nop
 8005834:	58024400 	.word	0x58024400

08005838 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b090      	sub	sp, #64	@ 0x40
 800583c:	af00      	add	r7, sp, #0
 800583e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005846:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800584a:	430b      	orrs	r3, r1
 800584c:	f040 8094 	bne.w	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005850:	4b9b      	ldr	r3, [pc, #620]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	2b04      	cmp	r3, #4
 800585e:	f200 8087 	bhi.w	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	0800587d 	.word	0x0800587d
 800586c:	080058a5 	.word	0x080058a5
 8005870:	080058cd 	.word	0x080058cd
 8005874:	08005969 	.word	0x08005969
 8005878:	080058f5 	.word	0x080058f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800587c:	4b90      	ldr	r3, [pc, #576]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005888:	d108      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800588a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 ff62 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005898:	f000 bc93 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a0:	f000 bc8f 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058a4:	4b86      	ldr	r3, [pc, #536]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b0:	d108      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b2:	f107 0318 	add.w	r3, r7, #24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fca6 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058c0:	f000 bc7f 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c8:	f000 bc7b 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058cc:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058d8:	d108      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fde6 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058e8:	f000 bc6b 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f0:	f000 bc67 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058f4:	4b72      	ldr	r3, [pc, #456]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058fe:	4b70      	ldr	r3, [pc, #448]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800590a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005910:	4b6b      	ldr	r3, [pc, #428]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005922:	e01f      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005924:	4b66      	ldr	r3, [pc, #408]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005930:	d106      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005938:	d102      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800593a:	4b63      	ldr	r3, [pc, #396]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800593e:	e011      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005940:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800594c:	d106      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800594e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005954:	d102      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005956:	4b5d      	ldr	r3, [pc, #372]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595a:	e003      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005960:	f000 bc2f 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005964:	f000 bc2d 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005968:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596c:	f000 bc29 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	f000 bc25 	b.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800597c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005980:	430b      	orrs	r3, r1
 8005982:	f040 80a7 	bne.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005986:	4b4e      	ldr	r3, [pc, #312]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800598e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005996:	d054      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800599e:	f200 808b 	bhi.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059a8:	f000 8083 	beq.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059b2:	f200 8081 	bhi.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059bc:	d02f      	beq.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059c4:	d878      	bhi.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059d2:	d012      	beq.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80059d4:	e070      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059d6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059e2:	d107      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 feb5 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059f2:	e3e6      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f8:	e3e3      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059fa:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a06:	d107      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a08:	f107 0318 	add.w	r3, r7, #24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fbfb 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a16:	e3d4      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1c:	e3d1      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a1e:	4b28      	ldr	r3, [pc, #160]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fd3d 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a3a:	e3c2      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a40:	e3bf      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a70:	e01e      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a72:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a86:	d102      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a88:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a8c:	e010      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005aae:	e388      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ab0:	e387      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ab2:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab6:	e384      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	e381      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	003d0900 	.word	0x003d0900
 8005acc:	017d7840 	.word	0x017d7840
 8005ad0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005adc:	430b      	orrs	r3, r1
 8005ade:	f040 809c 	bne.w	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005ae2:	4b9e      	ldr	r3, [pc, #632]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005af2:	d054      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afa:	f200 808b 	bhi.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b04:	f000 8083 	beq.w	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b0e:	f200 8081 	bhi.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b18:	d02f      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b20:	d878      	bhi.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b2e:	d012      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005b30:	e070      	b.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b32:	4b8a      	ldr	r3, [pc, #552]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fe07 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b4e:	e338      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b54:	e335      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b56:	4b81      	ldr	r3, [pc, #516]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b62:	d107      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b64:	f107 0318 	add.w	r3, r7, #24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fb4d 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b72:	e326      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e323      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b7a:	4b78      	ldr	r3, [pc, #480]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b86:	d107      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fc8f 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b96:	e314      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9c:	e311      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ba6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bba:	4b68      	ldr	r3, [pc, #416]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	08db      	lsrs	r3, r3, #3
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	4a66      	ldr	r2, [pc, #408]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bcc:	e01e      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bce:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bda:	d106      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005be2:	d102      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005be4:	4b5f      	ldr	r3, [pc, #380]	@ (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005be8:	e010      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bea:	4b5c      	ldr	r3, [pc, #368]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c00:	4b59      	ldr	r3, [pc, #356]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c04:	e002      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c0a:	e2da      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c0c:	e2d9      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c0e:	4b57      	ldr	r3, [pc, #348]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c12:	e2d6      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e2d3      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c1e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005c22:	430b      	orrs	r3, r1
 8005c24:	f040 80a7 	bne.w	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005c28:	4b4c      	ldr	r3, [pc, #304]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005c30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c38:	d055      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c40:	f200 8096 	bhi.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c4a:	f000 8084 	beq.w	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c54:	f200 808c 	bhi.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5e:	d030      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c66:	f200 8083 	bhi.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d012      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005c78:	e07a      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c7a:	4b38      	ldr	r3, [pc, #224]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c86:	d107      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd63 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c96:	e294      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9c:	e291      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005caa:	d107      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cac:	f107 0318 	add.w	r3, r7, #24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 faa9 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cba:	e282      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc0:	e27f      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cc2:	4b26      	ldr	r3, [pc, #152]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd0:	f107 030c 	add.w	r3, r7, #12
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fbeb 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cde:	e270      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce4:	e26d      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d10c      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d02:	4b16      	ldr	r3, [pc, #88]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	4a14      	ldr	r2, [pc, #80]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d14:	e01e      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d16:	4b11      	ldr	r3, [pc, #68]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d106      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d30:	e010      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d32:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d46:	d102      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d48:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d52:	e236      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d54:	e235      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d56:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d5a:	e232      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	017d7840 	.word	0x017d7840
 8005d6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d74:	e225      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f040 8085 	bne.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005d84:	4b9c      	ldr	r3, [pc, #624]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d94:	d06b      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d9c:	d874      	bhi.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005da4:	d056      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dac:	d86c      	bhi.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005db4:	d03b      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dbc:	d864      	bhi.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc4:	d021      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dcc:	d85c      	bhi.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dda:	d004      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005ddc:	e054      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fe fb75 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 8005de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005de4:	e1ed      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de6:	4b84      	ldr	r3, [pc, #528]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005df2:	d107      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005df4:	f107 0318 	add.w	r3, r7, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fa05 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e02:	e1de      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e08:	e1db      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e16:	d107      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fb47 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e26:	e1cc      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e2c:	e1c9      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e2e:	4b72      	ldr	r3, [pc, #456]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	4a6d      	ldr	r2, [pc, #436]	@ (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e4c:	e1b9      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e52:	e1b6      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e54:	4b68      	ldr	r3, [pc, #416]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e60:	d102      	bne.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e66:	e1ac      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e1a9      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e6e:	4b62      	ldr	r3, [pc, #392]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005e7c:	4b61      	ldr	r3, [pc, #388]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e80:	e19f      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e86:	e19c      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e199      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e92:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005e96:	430b      	orrs	r3, r1
 8005e98:	d173      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e9a:	4b57      	ldr	r3, [pc, #348]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ea2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eaa:	d02f      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eb2:	d863      	bhi.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec0:	d012      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005ec2:	e05b      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed2:	f107 0318 	add.w	r3, r7, #24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f996 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee0:	e16f      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee6:	e16c      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee8:	4b43      	ldr	r3, [pc, #268]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef6:	f107 030c 	add.w	r3, r7, #12
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fad8 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f04:	e15d      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0a:	e15a      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f16:	4b38      	ldr	r3, [pc, #224]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f28:	4b33      	ldr	r3, [pc, #204]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	08db      	lsrs	r3, r3, #3
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	4a32      	ldr	r2, [pc, #200]	@ (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3a:	e01e      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f48:	d106      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f50:	d102      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f52:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f56:	e010      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f58:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f64:	d106      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f6e:	4b25      	ldr	r3, [pc, #148]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f72:	e002      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f78:	e123      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f7a:	e122      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f80:	e11f      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f86:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	d13c      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d012      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005fa6:	e023      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fa8:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fb4:	d107      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fbcc 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc4:	e0fd      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fca:	e0fa      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd8:	d107      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	f107 0318 	add.w	r3, r7, #24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f912 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe8:	e0eb      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fee:	e0e8      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff4:	e0e5      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ff6:	bf00      	nop
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	03d09000 	.word	0x03d09000
 8006000:	003d0900 	.word	0x003d0900
 8006004:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006010:	430b      	orrs	r3, r1
 8006012:	f040 8085 	bne.w	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006016:	4b6d      	ldr	r3, [pc, #436]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800601e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006026:	d06b      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602e:	d874      	bhi.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006036:	d056      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603e:	d86c      	bhi.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006046:	d03b      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800604e:	d864      	bhi.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d021      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605e:	d85c      	bhi.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606c:	d004      	beq.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800606e:	e054      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006070:	f000 f8b4 	bl	80061dc <HAL_RCCEx_GetD3PCLK1Freq>
 8006074:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006076:	e0a4      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006078:	4b54      	ldr	r3, [pc, #336]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006084:	d107      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006086:	f107 0318 	add.w	r3, r7, #24
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f8bc 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006094:	e095      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609a:	e092      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800609c:	4b4b      	ldr	r3, [pc, #300]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a8:	d107      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060aa:	f107 030c 	add.w	r3, r7, #12
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f9fe 	bl	80064b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b8:	e083      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060be:	e080      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c0:	4b42      	ldr	r3, [pc, #264]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d109      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060cc:	4b3f      	ldr	r3, [pc, #252]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	08db      	lsrs	r3, r3, #3
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	4a3e      	ldr	r2, [pc, #248]	@ (80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060de:	e070      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e4:	e06d      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060e6:	4b39      	ldr	r3, [pc, #228]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f2:	d102      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80060f4:	4b37      	ldr	r3, [pc, #220]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80060f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f8:	e063      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060fe:	e060      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006100:	4b32      	ldr	r3, [pc, #200]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800610c:	d102      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800610e:	4b32      	ldr	r3, [pc, #200]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006112:	e056      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006118:	e053      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611e:	e050      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006128:	430b      	orrs	r3, r1
 800612a:	d148      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800612c:	4b27      	ldr	r3, [pc, #156]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800612e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006134:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613c:	d02a      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006144:	d838      	bhi.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006152:	d00d      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006154:	e030      	b.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006156:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006162:	d102      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006164:	4b1c      	ldr	r3, [pc, #112]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006168:	e02b      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616e:	e028      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006170:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800617e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fae8 	bl	8006758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800618c:	e019      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006192:	e016      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006194:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800619c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a0:	d107      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a2:	f107 0318 	add.w	r3, r7, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f82e 	bl	8006208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b0:	e007      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e001      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80061c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3740      	adds	r7, #64	@ 0x40
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	58024400 	.word	0x58024400
 80061d0:	03d09000 	.word	0x03d09000
 80061d4:	003d0900 	.word	0x003d0900
 80061d8:	017d7840 	.word	0x017d7840

080061dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061e0:	f7fe f944 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4904      	ldr	r1, [pc, #16]	@ (8006204 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	58024400 	.word	0x58024400
 8006204:	08007dc4 	.word	0x08007dc4

08006208 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	@ 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006210:	4ba1      	ldr	r3, [pc, #644]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800621a:	4b9f      	ldr	r3, [pc, #636]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	0b1b      	lsrs	r3, r3, #12
 8006220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006224:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006226:	4b9c      	ldr	r3, [pc, #624]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006232:	4b99      	ldr	r3, [pc, #612]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006236:	08db      	lsrs	r3, r3, #3
 8006238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8111 	beq.w	8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f000 8083 	beq.w	8006364 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f200 80a1 	bhi.w	80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d056      	beq.n	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006272:	e099      	b.n	80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006274:	4b88      	ldr	r3, [pc, #544]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02d      	beq.n	80062dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006280:	4b85      	ldr	r3, [pc, #532]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	4a84      	ldr	r2, [pc, #528]	@ (800649c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80062be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062da:	e087      	b.n	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006302:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631e:	e065      	b.n	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800632e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006332:	4b59      	ldr	r3, [pc, #356]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a03 	vldr	s12, [r7, #12]
 8006346:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006362:	e043      	b.n	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b48      	ldr	r3, [pc, #288]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a03 	vldr	s12, [r7, #12]
 800638a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a6:	e021      	b.n	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ba:	4b37      	ldr	r3, [pc, #220]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80063ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	0a5b      	lsrs	r3, r3, #9
 80063f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006406:	edd7 6a07 	vldr	s13, [r7, #28]
 800640a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006412:	ee17 2a90 	vmov	r2, s15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800641a:	4b1f      	ldr	r3, [pc, #124]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006434:	edd7 6a07 	vldr	s13, [r7, #28]
 8006438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006440:	ee17 2a90 	vmov	r2, s15
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006448:	4b13      	ldr	r3, [pc, #76]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	0e1b      	lsrs	r3, r3, #24
 800644e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006462:	edd7 6a07 	vldr	s13, [r7, #28]
 8006466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646e:	ee17 2a90 	vmov	r2, s15
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006476:	e008      	b.n	800648a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
}
 800648a:	bf00      	nop
 800648c:	3724      	adds	r7, #36	@ 0x24
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
 800649c:	03d09000 	.word	0x03d09000
 80064a0:	46000000 	.word	0x46000000
 80064a4:	4c742400 	.word	0x4c742400
 80064a8:	4a742400 	.word	0x4a742400
 80064ac:	4bbebc20 	.word	0x4bbebc20

080064b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b089      	sub	sp, #36	@ 0x24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80064c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c6:	0d1b      	lsrs	r3, r3, #20
 80064c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80064da:	4b99      	ldr	r3, [pc, #612]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	08db      	lsrs	r3, r3, #3
 80064e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8111 	beq.w	8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b02      	cmp	r3, #2
 8006502:	f000 8083 	beq.w	800660c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b02      	cmp	r3, #2
 800650a:	f200 80a1 	bhi.w	8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d056      	beq.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800651a:	e099      	b.n	8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800651c:	4b88      	ldr	r3, [pc, #544]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d02d      	beq.n	8006584 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006528:	4b85      	ldr	r3, [pc, #532]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	08db      	lsrs	r3, r3, #3
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	4a84      	ldr	r2, [pc, #528]	@ (8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
 8006538:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006552:	4b7b      	ldr	r3, [pc, #492]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006562:	ed97 6a03 	vldr	s12, [r7, #12]
 8006566:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006582:	e087      	b.n	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800674c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006596:	4b6a      	ldr	r3, [pc, #424]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c6:	e065      	b.n	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065da:	4b59      	ldr	r3, [pc, #356]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800660a:	e043      	b.n	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800661a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661e:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006632:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664e:	e021      	b.n	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800665e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006662:	4b37      	ldr	r3, [pc, #220]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006672:	ed97 6a03 	vldr	s12, [r7, #12]
 8006676:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800667a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006692:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006694:	4b2a      	ldr	r3, [pc, #168]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	0a5b      	lsrs	r3, r3, #9
 800669a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80066b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ba:	ee17 2a90 	vmov	r2, s15
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80066c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e8:	ee17 2a90 	vmov	r2, s15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80066f0:	4b13      	ldr	r3, [pc, #76]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800670a:	edd7 6a07 	vldr	s13, [r7, #28]
 800670e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006716:	ee17 2a90 	vmov	r2, s15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800671e:	e008      	b.n	8006732 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]
}
 8006732:	bf00      	nop
 8006734:	3724      	adds	r7, #36	@ 0x24
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	58024400 	.word	0x58024400
 8006744:	03d09000 	.word	0x03d09000
 8006748:	46000000 	.word	0x46000000
 800674c:	4c742400 	.word	0x4c742400
 8006750:	4a742400 	.word	0x4a742400
 8006754:	4bbebc20 	.word	0x4bbebc20

08006758 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	@ 0x24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006760:	4ba0      	ldr	r3, [pc, #640]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800676a:	4b9e      	ldr	r3, [pc, #632]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800676c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006774:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006776:	4b9b      	ldr	r3, [pc, #620]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006780:	4b98      	ldr	r3, [pc, #608]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006798:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8111 	beq.w	80069c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	f000 8083 	beq.w	80068b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	f200 80a1 	bhi.w	80068f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d056      	beq.n	800686e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80067c0:	e099      	b.n	80068f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c2:	4b88      	ldr	r3, [pc, #544]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02d      	beq.n	800682a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ce:	4b85      	ldr	r3, [pc, #532]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	08db      	lsrs	r3, r3, #3
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	4a83      	ldr	r2, [pc, #524]	@ (80069e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f8:	4b7a      	ldr	r3, [pc, #488]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006808:	ed97 6a03 	vldr	s12, [r7, #12]
 800680c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80069ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006818:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006824:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006828:	e087      	b.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006834:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80069f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683c:	4b69      	ldr	r3, [pc, #420]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006850:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80069ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800686c:	e065      	b.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006878:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80069f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800687c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006880:	4b58      	ldr	r3, [pc, #352]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006890:	ed97 6a03 	vldr	s12, [r7, #12]
 8006894:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80069ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b0:	e043      	b.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80069f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80068c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c4:	4b47      	ldr	r3, [pc, #284]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80069ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f4:	e021      	b.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006900:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80069f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006908:	4b36      	ldr	r3, [pc, #216]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006918:	ed97 6a03 	vldr	s12, [r7, #12]
 800691c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80069ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800692c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006938:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800693a:	4b2a      	ldr	r3, [pc, #168]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693e:	0a5b      	lsrs	r3, r3, #9
 8006940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006954:	edd7 6a07 	vldr	s13, [r7, #28]
 8006958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800695c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006960:	ee17 2a90 	vmov	r2, s15
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006968:	4b1e      	ldr	r3, [pc, #120]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800697e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006982:	edd7 6a07 	vldr	s13, [r7, #28]
 8006986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800698a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800698e:	ee17 2a90 	vmov	r2, s15
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006996:	4b13      	ldr	r3, [pc, #76]	@ (80069e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	0e1b      	lsrs	r3, r3, #24
 800699c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069bc:	ee17 2a90 	vmov	r2, s15
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80069c4:	e008      	b.n	80069d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	3724      	adds	r7, #36	@ 0x24
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	58024400 	.word	0x58024400
 80069e8:	03d09000 	.word	0x03d09000
 80069ec:	46000000 	.word	0x46000000
 80069f0:	4c742400 	.word	0x4c742400
 80069f4:	4a742400 	.word	0x4a742400
 80069f8:	4bbebc20 	.word	0x4bbebc20

080069fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a0a:	4b53      	ldr	r3, [pc, #332]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d101      	bne.n	8006a1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e099      	b.n	8006b4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a26:	f7fa f9f1 	bl	8000e0c <HAL_GetTick>
 8006a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a2c:	e008      	b.n	8006a40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a2e:	f7fa f9ed 	bl	8000e0c <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e086      	b.n	8006b4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a40:	4b45      	ldr	r3, [pc, #276]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f0      	bne.n	8006a2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	493f      	ldr	r1, [pc, #252]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	061b      	lsls	r3, r3, #24
 8006a8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a90:	4931      	ldr	r1, [pc, #196]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a96:	4b30      	ldr	r3, [pc, #192]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	492d      	ldr	r1, [pc, #180]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	f023 0220 	bic.w	r2, r3, #32
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	4928      	ldr	r1, [pc, #160]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006aba:	4b27      	ldr	r3, [pc, #156]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	4a26      	ldr	r2, [pc, #152]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006ac0:	f023 0310 	bic.w	r3, r3, #16
 8006ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ac6:	4b24      	ldr	r3, [pc, #144]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aca:	4b24      	ldr	r3, [pc, #144]	@ (8006b5c <RCCEx_PLL2_Config+0x160>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	69d2      	ldr	r2, [r2, #28]
 8006ad2:	00d2      	lsls	r2, r2, #3
 8006ad4:	4920      	ldr	r1, [pc, #128]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ada:	4b1f      	ldr	r3, [pc, #124]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	4a1e      	ldr	r2, [pc, #120]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	f043 0310 	orr.w	r3, r3, #16
 8006ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006aec:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006af2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006af6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006af8:	e00f      	b.n	8006b1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d106      	bne.n	8006b0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b00:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4a14      	ldr	r2, [pc, #80]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b0c:	e005      	b.n	8006b1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b0e:	4b12      	ldr	r3, [pc, #72]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	4a11      	ldr	r2, [pc, #68]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b26:	f7fa f971 	bl	8000e0c <HAL_GetTick>
 8006b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b2c:	e008      	b.n	8006b40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b2e:	f7fa f96d 	bl	8000e0c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e006      	b.n	8006b4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b40:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <RCCEx_PLL2_Config+0x15c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	ffff0007 	.word	0xffff0007

08006b60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b6e:	4b53      	ldr	r3, [pc, #332]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d101      	bne.n	8006b7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e099      	b.n	8006cb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a4e      	ldr	r2, [pc, #312]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b8a:	f7fa f93f 	bl	8000e0c <HAL_GetTick>
 8006b8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b90:	e008      	b.n	8006ba4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b92:	f7fa f93b 	bl	8000e0c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e086      	b.n	8006cb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ba4:	4b45      	ldr	r3, [pc, #276]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f0      	bne.n	8006b92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bb0:	4b42      	ldr	r3, [pc, #264]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	051b      	lsls	r3, r3, #20
 8006bbe:	493f      	ldr	r1, [pc, #252]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	025b      	lsls	r3, r3, #9
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	061b      	lsls	r3, r3, #24
 8006bf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bf4:	4931      	ldr	r1, [pc, #196]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bfa:	4b30      	ldr	r3, [pc, #192]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	492d      	ldr	r1, [pc, #180]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	4928      	ldr	r1, [pc, #160]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c1e:	4b27      	ldr	r3, [pc, #156]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	4a26      	ldr	r2, [pc, #152]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c2a:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c2e:	4b24      	ldr	r3, [pc, #144]	@ (8006cc0 <RCCEx_PLL3_Config+0x160>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	69d2      	ldr	r2, [r2, #28]
 8006c36:	00d2      	lsls	r2, r2, #3
 8006c38:	4920      	ldr	r1, [pc, #128]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	4a1e      	ldr	r2, [pc, #120]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c50:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	4a19      	ldr	r2, [pc, #100]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c5c:	e00f      	b.n	8006c7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d106      	bne.n	8006c72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c64:	4b15      	ldr	r3, [pc, #84]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a14      	ldr	r2, [pc, #80]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c70:	e005      	b.n	8006c7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c72:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	4a11      	ldr	r2, [pc, #68]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a0e      	ldr	r2, [pc, #56]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c8a:	f7fa f8bf 	bl	8000e0c <HAL_GetTick>
 8006c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c90:	e008      	b.n	8006ca4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c92:	f7fa f8bb 	bl	8000e0c <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e006      	b.n	8006cb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ca4:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <RCCEx_PLL3_Config+0x15c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	ffff0007 	.word	0xffff0007

08006cc4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e049      	b.n	8006d6a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f841 	bl	8006d72 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f000 fb5e 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e049      	b.n	8006e2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7f9 fef5 	bl	8000b9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f000 fafd 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d020      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01b      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0202 	mvn.w	r2, #2
 8006e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa82 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e005      	b.n	8006e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa74 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa85 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d020      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01b      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0204 	mvn.w	r2, #4
 8006eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa5c 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa4e 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fa5f 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d020      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0208 	mvn.w	r2, #8
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa36 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa28 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa39 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0210 	mvn.w	r2, #16
 8006f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2208      	movs	r2, #8
 8006f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa10 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa02 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa13 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00c      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0201 	mvn.w	r2, #1
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9e0 	bl	8007360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 feaf 	bl	8007d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fea7 	bl	8007d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800700e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f9cd 	bl	80073b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f06f 0220 	mvn.w	r2, #32
 8007032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe6f 	bl	8007d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_TIM_OC_ConfigChannel+0x1e>
 800705e:	2302      	movs	r3, #2
 8007060:	e066      	b.n	8007130 <HAL_TIM_OC_ConfigChannel+0xec>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b14      	cmp	r3, #20
 800706e:	d857      	bhi.n	8007120 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070cd 	.word	0x080070cd
 800707c:	08007121 	.word	0x08007121
 8007080:	08007121 	.word	0x08007121
 8007084:	08007121 	.word	0x08007121
 8007088:	080070db 	.word	0x080070db
 800708c:	08007121 	.word	0x08007121
 8007090:	08007121 	.word	0x08007121
 8007094:	08007121 	.word	0x08007121
 8007098:	080070e9 	.word	0x080070e9
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007121 	.word	0x08007121
 80070a4:	08007121 	.word	0x08007121
 80070a8:	080070f7 	.word	0x080070f7
 80070ac:	08007121 	.word	0x08007121
 80070b0:	08007121 	.word	0x08007121
 80070b4:	08007121 	.word	0x08007121
 80070b8:	08007105 	.word	0x08007105
 80070bc:	08007121 	.word	0x08007121
 80070c0:	08007121 	.word	0x08007121
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007113 	.word	0x08007113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fa22 	bl	800751c <TIM_OC1_SetConfig>
      break;
 80070d8:	e025      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 faab 	bl	800763c <TIM_OC2_SetConfig>
      break;
 80070e6:	e01e      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fb2e 	bl	8007750 <TIM_OC3_SetConfig>
      break;
 80070f4:	e017      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fbaf 	bl	8007860 <TIM_OC4_SetConfig>
      break;
 8007102:	e010      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fc12 	bl	8007934 <TIM_OC5_SetConfig>
      break;
 8007110:	e009      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fc6f 	bl	80079fc <TIM_OC6_SetConfig>
      break;
 800711e:	e002      	b.n	8007126 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
      break;
 8007124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007152:	2302      	movs	r3, #2
 8007154:	e0ff      	b.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b14      	cmp	r3, #20
 8007162:	f200 80f0 	bhi.w	8007346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007166:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	080071c1 	.word	0x080071c1
 8007170:	08007347 	.word	0x08007347
 8007174:	08007347 	.word	0x08007347
 8007178:	08007347 	.word	0x08007347
 800717c:	08007201 	.word	0x08007201
 8007180:	08007347 	.word	0x08007347
 8007184:	08007347 	.word	0x08007347
 8007188:	08007347 	.word	0x08007347
 800718c:	08007243 	.word	0x08007243
 8007190:	08007347 	.word	0x08007347
 8007194:	08007347 	.word	0x08007347
 8007198:	08007347 	.word	0x08007347
 800719c:	08007283 	.word	0x08007283
 80071a0:	08007347 	.word	0x08007347
 80071a4:	08007347 	.word	0x08007347
 80071a8:	08007347 	.word	0x08007347
 80071ac:	080072c5 	.word	0x080072c5
 80071b0:	08007347 	.word	0x08007347
 80071b4:	08007347 	.word	0x08007347
 80071b8:	08007347 	.word	0x08007347
 80071bc:	08007305 	.word	0x08007305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f9a8 	bl	800751c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0208 	orr.w	r2, r2, #8
 80071da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0204 	bic.w	r2, r2, #4
 80071ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6999      	ldr	r1, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	619a      	str	r2, [r3, #24]
      break;
 80071fe:	e0a5      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fa18 	bl	800763c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800721a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800722a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6999      	ldr	r1, [r3, #24]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	021a      	lsls	r2, r3, #8
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	619a      	str	r2, [r3, #24]
      break;
 8007240:	e084      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fa81 	bl	8007750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0208 	orr.w	r2, r2, #8
 800725c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0204 	bic.w	r2, r2, #4
 800726c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69d9      	ldr	r1, [r3, #28]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	61da      	str	r2, [r3, #28]
      break;
 8007280:	e064      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fae9 	bl	8007860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800729c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69d9      	ldr	r1, [r3, #28]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	021a      	lsls	r2, r3, #8
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	61da      	str	r2, [r3, #28]
      break;
 80072c2:	e043      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fb32 	bl	8007934 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0208 	orr.w	r2, r2, #8
 80072de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0204 	bic.w	r2, r2, #4
 80072ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691a      	ldr	r2, [r3, #16]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007302:	e023      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fb76 	bl	80079fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800731e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	021a      	lsls	r2, r3, #8
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007344:	e002      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
      break;
 800734a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop

08007360 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a47      	ldr	r2, [pc, #284]	@ (80074f4 <TIM_Base_SetConfig+0x130>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e2:	d00f      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a44      	ldr	r2, [pc, #272]	@ (80074f8 <TIM_Base_SetConfig+0x134>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00b      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a43      	ldr	r2, [pc, #268]	@ (80074fc <TIM_Base_SetConfig+0x138>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a42      	ldr	r2, [pc, #264]	@ (8007500 <TIM_Base_SetConfig+0x13c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a41      	ldr	r2, [pc, #260]	@ (8007504 <TIM_Base_SetConfig+0x140>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d108      	bne.n	8007416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a36      	ldr	r2, [pc, #216]	@ (80074f4 <TIM_Base_SetConfig+0x130>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d027      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007424:	d023      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a33      	ldr	r2, [pc, #204]	@ (80074f8 <TIM_Base_SetConfig+0x134>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d01f      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a32      	ldr	r2, [pc, #200]	@ (80074fc <TIM_Base_SetConfig+0x138>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d01b      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a31      	ldr	r2, [pc, #196]	@ (8007500 <TIM_Base_SetConfig+0x13c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d017      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <TIM_Base_SetConfig+0x140>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <TIM_Base_SetConfig+0x144>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00f      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <TIM_Base_SetConfig+0x148>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00b      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <TIM_Base_SetConfig+0x14c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <TIM_Base_SetConfig+0x150>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_Base_SetConfig+0xaa>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <TIM_Base_SetConfig+0x154>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d108      	bne.n	8007480 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a14      	ldr	r2, [pc, #80]	@ (80074f4 <TIM_Base_SetConfig+0x130>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00f      	beq.n	80074c6 <TIM_Base_SetConfig+0x102>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a16      	ldr	r2, [pc, #88]	@ (8007504 <TIM_Base_SetConfig+0x140>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00b      	beq.n	80074c6 <TIM_Base_SetConfig+0x102>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a15      	ldr	r2, [pc, #84]	@ (8007508 <TIM_Base_SetConfig+0x144>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d007      	beq.n	80074c6 <TIM_Base_SetConfig+0x102>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a14      	ldr	r2, [pc, #80]	@ (800750c <TIM_Base_SetConfig+0x148>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_Base_SetConfig+0x102>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a13      	ldr	r2, [pc, #76]	@ (8007510 <TIM_Base_SetConfig+0x14c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d103      	bne.n	80074ce <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	691a      	ldr	r2, [r3, #16]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f043 0204 	orr.w	r2, r3, #4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40010400 	.word	0x40010400
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800
 8007514:	4000e000 	.word	0x4000e000
 8007518:	4000e400 	.word	0x4000e400

0800751c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f023 0201 	bic.w	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4b37      	ldr	r3, [pc, #220]	@ (8007624 <TIM_OC1_SetConfig+0x108>)
 8007548:	4013      	ands	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 0302 	bic.w	r3, r3, #2
 8007564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2d      	ldr	r2, [pc, #180]	@ (8007628 <TIM_OC1_SetConfig+0x10c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_OC1_SetConfig+0x7c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2c      	ldr	r2, [pc, #176]	@ (800762c <TIM_OC1_SetConfig+0x110>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC1_SetConfig+0x7c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2b      	ldr	r2, [pc, #172]	@ (8007630 <TIM_OC1_SetConfig+0x114>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC1_SetConfig+0x7c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2a      	ldr	r2, [pc, #168]	@ (8007634 <TIM_OC1_SetConfig+0x118>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC1_SetConfig+0x7c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a29      	ldr	r2, [pc, #164]	@ (8007638 <TIM_OC1_SetConfig+0x11c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0308 	bic.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <TIM_OC1_SetConfig+0x10c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00f      	beq.n	80075da <TIM_OC1_SetConfig+0xbe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1b      	ldr	r2, [pc, #108]	@ (800762c <TIM_OC1_SetConfig+0x110>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_OC1_SetConfig+0xbe>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007630 <TIM_OC1_SetConfig+0x114>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC1_SetConfig+0xbe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <TIM_OC1_SetConfig+0x118>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC1_SetConfig+0xbe>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <TIM_OC1_SetConfig+0x11c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d111      	bne.n	80075fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	fffeff8f 	.word	0xfffeff8f
 8007628:	40010000 	.word	0x40010000
 800762c:	40010400 	.word	0x40010400
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0210 	bic.w	r2, r3, #16
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4b34      	ldr	r3, [pc, #208]	@ (8007738 <TIM_OC2_SetConfig+0xfc>)
 8007668:	4013      	ands	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a29      	ldr	r2, [pc, #164]	@ (800773c <TIM_OC2_SetConfig+0x100>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0x68>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a28      	ldr	r2, [pc, #160]	@ (8007740 <TIM_OC2_SetConfig+0x104>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10d      	bne.n	80076c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1e      	ldr	r2, [pc, #120]	@ (800773c <TIM_OC2_SetConfig+0x100>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC2_SetConfig+0xac>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007740 <TIM_OC2_SetConfig+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC2_SetConfig+0xac>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007744 <TIM_OC2_SetConfig+0x108>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC2_SetConfig+0xac>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1b      	ldr	r2, [pc, #108]	@ (8007748 <TIM_OC2_SetConfig+0x10c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0xac>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1a      	ldr	r2, [pc, #104]	@ (800774c <TIM_OC2_SetConfig+0x110>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	feff8fff 	.word	0xfeff8fff
 800773c:	40010000 	.word	0x40010000
 8007740:	40010400 	.word	0x40010400
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800

08007750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4b33      	ldr	r3, [pc, #204]	@ (8007848 <TIM_OC3_SetConfig+0xf8>)
 800777c:	4013      	ands	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a28      	ldr	r2, [pc, #160]	@ (800784c <TIM_OC3_SetConfig+0xfc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_OC3_SetConfig+0x66>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a27      	ldr	r2, [pc, #156]	@ (8007850 <TIM_OC3_SetConfig+0x100>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10d      	bne.n	80077d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1d      	ldr	r2, [pc, #116]	@ (800784c <TIM_OC3_SetConfig+0xfc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00f      	beq.n	80077fa <TIM_OC3_SetConfig+0xaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007850 <TIM_OC3_SetConfig+0x100>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00b      	beq.n	80077fa <TIM_OC3_SetConfig+0xaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007854 <TIM_OC3_SetConfig+0x104>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <TIM_OC3_SetConfig+0xaa>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007858 <TIM_OC3_SetConfig+0x108>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC3_SetConfig+0xaa>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a19      	ldr	r2, [pc, #100]	@ (800785c <TIM_OC3_SetConfig+0x10c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d113      	bne.n	8007822 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	fffeff8f 	.word	0xfffeff8f
 800784c:	40010000 	.word	0x40010000
 8007850:	40010400 	.word	0x40010400
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4b24      	ldr	r3, [pc, #144]	@ (800791c <TIM_OC4_SetConfig+0xbc>)
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	031b      	lsls	r3, r3, #12
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a19      	ldr	r2, [pc, #100]	@ (8007920 <TIM_OC4_SetConfig+0xc0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00f      	beq.n	80078e0 <TIM_OC4_SetConfig+0x80>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a18      	ldr	r2, [pc, #96]	@ (8007924 <TIM_OC4_SetConfig+0xc4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_OC4_SetConfig+0x80>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a17      	ldr	r2, [pc, #92]	@ (8007928 <TIM_OC4_SetConfig+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_OC4_SetConfig+0x80>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a16      	ldr	r2, [pc, #88]	@ (800792c <TIM_OC4_SetConfig+0xcc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC4_SetConfig+0x80>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a15      	ldr	r2, [pc, #84]	@ (8007930 <TIM_OC4_SetConfig+0xd0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d109      	bne.n	80078f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	feff8fff 	.word	0xfeff8fff
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800

08007934 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4b21      	ldr	r3, [pc, #132]	@ (80079e4 <TIM_OC5_SetConfig+0xb0>)
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a18      	ldr	r2, [pc, #96]	@ (80079e8 <TIM_OC5_SetConfig+0xb4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00f      	beq.n	80079aa <TIM_OC5_SetConfig+0x76>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a17      	ldr	r2, [pc, #92]	@ (80079ec <TIM_OC5_SetConfig+0xb8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <TIM_OC5_SetConfig+0x76>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a16      	ldr	r2, [pc, #88]	@ (80079f0 <TIM_OC5_SetConfig+0xbc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d007      	beq.n	80079aa <TIM_OC5_SetConfig+0x76>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a15      	ldr	r2, [pc, #84]	@ (80079f4 <TIM_OC5_SetConfig+0xc0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC5_SetConfig+0x76>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a14      	ldr	r2, [pc, #80]	@ (80079f8 <TIM_OC5_SetConfig+0xc4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d109      	bne.n	80079be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	621a      	str	r2, [r3, #32]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	fffeff8f 	.word	0xfffeff8f
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800

080079fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4b22      	ldr	r3, [pc, #136]	@ (8007ab0 <TIM_OC6_SetConfig+0xb4>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	051b      	lsls	r3, r3, #20
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	@ (8007ab4 <TIM_OC6_SetConfig+0xb8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00f      	beq.n	8007a74 <TIM_OC6_SetConfig+0x78>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a18      	ldr	r2, [pc, #96]	@ (8007ab8 <TIM_OC6_SetConfig+0xbc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00b      	beq.n	8007a74 <TIM_OC6_SetConfig+0x78>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a17      	ldr	r2, [pc, #92]	@ (8007abc <TIM_OC6_SetConfig+0xc0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d007      	beq.n	8007a74 <TIM_OC6_SetConfig+0x78>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a16      	ldr	r2, [pc, #88]	@ (8007ac0 <TIM_OC6_SetConfig+0xc4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC6_SetConfig+0x78>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a15      	ldr	r2, [pc, #84]	@ (8007ac4 <TIM_OC6_SetConfig+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d109      	bne.n	8007a88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	029b      	lsls	r3, r3, #10
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	feff8fff 	.word	0xfeff8fff
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800

08007ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e077      	b.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a35      	ldr	r2, [pc, #212]	@ (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a34      	ldr	r2, [pc, #208]	@ (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a25      	ldr	r2, [pc, #148]	@ (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d02c      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b52:	d027      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a22      	ldr	r2, [pc, #136]	@ (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d022      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d01d      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d018      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1a      	ldr	r2, [pc, #104]	@ (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00e      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	@ (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d10c      	bne.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40001800 	.word	0x40001800
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	4000e000 	.word	0x4000e000
 8007bfc:	4000e400 	.word	0x4000e400

08007c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e073      	b.n	8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a19      	ldr	r2, [pc, #100]	@ (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a18      	ldr	r2, [pc, #96]	@ (8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d11c      	bne.n	8007cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc2:	051b      	lsls	r3, r3, #20
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40010400 	.word	0x40010400

08007d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <memset>:
 8007d54:	4402      	add	r2, r0
 8007d56:	4603      	mov	r3, r0
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memset+0xa>
 8007d5c:	4770      	bx	lr
 8007d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d62:	e7f9      	b.n	8007d58 <memset+0x4>

08007d64 <__libc_init_array>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4d0d      	ldr	r5, [pc, #52]	@ (8007d9c <__libc_init_array+0x38>)
 8007d68:	4c0d      	ldr	r4, [pc, #52]	@ (8007da0 <__libc_init_array+0x3c>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	d109      	bne.n	8007d88 <__libc_init_array+0x24>
 8007d74:	4d0b      	ldr	r5, [pc, #44]	@ (8007da4 <__libc_init_array+0x40>)
 8007d76:	4c0c      	ldr	r4, [pc, #48]	@ (8007da8 <__libc_init_array+0x44>)
 8007d78:	f000 f818 	bl	8007dac <_init>
 8007d7c:	1b64      	subs	r4, r4, r5
 8007d7e:	10a4      	asrs	r4, r4, #2
 8007d80:	2600      	movs	r6, #0
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	d105      	bne.n	8007d92 <__libc_init_array+0x2e>
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8c:	4798      	blx	r3
 8007d8e:	3601      	adds	r6, #1
 8007d90:	e7ee      	b.n	8007d70 <__libc_init_array+0xc>
 8007d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d96:	4798      	blx	r3
 8007d98:	3601      	adds	r6, #1
 8007d9a:	e7f2      	b.n	8007d82 <__libc_init_array+0x1e>
 8007d9c:	08007dd4 	.word	0x08007dd4
 8007da0:	08007dd4 	.word	0x08007dd4
 8007da4:	08007dd4 	.word	0x08007dd4
 8007da8:	08007dd8 	.word	0x08007dd8

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
